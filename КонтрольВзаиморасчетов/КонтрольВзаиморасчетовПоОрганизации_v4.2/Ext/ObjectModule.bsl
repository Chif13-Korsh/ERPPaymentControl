#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СхемаСКД Экспорт;
Перем ТекущийПользователь Экспорт;
Перем СтруктураСохранения;

#КонецОбласти

#Область СтандартныеПроцедурыВнешнихОбработок

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ПараметрыРегистрации_СведенияОВнешнейОбработке("2.5.0.0");
	
	ПараметрыРегистрации.Вид             = "ДополнительныйОтчет";
	ПараметрыРегистрации.Наименование    = НСтр("ru = 'Контроль онлайн-взаиморасчетов по организации'");
	ПараметрыРегистрации.Информация      = ИнформацияИзмененийПоОбработке();
	ПараметрыРегистрации.Версия          = "4.2";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление        = НСтр("ru = 'Контроль онлайн-взаиморасчетов по организации'");
	Команда.Идентификатор        = ЭтотОбъект.Метаданные().Имя;
	Команда.Использование        = "ОткрытиеФормы";
	Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПараметрыРегистрации_СведенияОВнешнейОбработке(ВерсияБСП = "") Экспорт
	//ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.5.0.0")
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид",                      "");
	ПараметрыРегистрации.Вставить("Версия",                   "0.0");
	ПараметрыРегистрации.Вставить("Назначение",               Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование",             Неопределено);
	ПараметрыРегистрации.Вставить("БезопасныйРежим",          Истина);
	ПараметрыРегистрации.Вставить("Информация",               Неопределено);
	ПараметрыРегистрации.Вставить("ВерсияБСП",                ВерсияБСП);
	ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление",        РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор",        РеквизитыТабличнойЧасти.Идентификатор.Тип);
	// Использование - Вид запуска обработки: "ВызовКлиентскогоМетода", "ВызовСерверногоМетода", "ЗаполнениеФормы", "ОткрытиеФормы", "СценарийВБезопасномРежиме"
	ТаблицаКоманд.Колонки.Добавить("Использование",        Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор",          РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",               РеквизитыТабличнойЧасти.Скрыть.Тип);
	ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды",    РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	ПараметрыРегистрации.Вставить("Команды",    ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);
	
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ИнформацияИзмененийПоОбработке()
	Возврат
	НСтр("ru = 'Контроль взаиморасчетов по организации:
	|v 4.2 - Поправлен запрос по сверки сумм между регл.операциями и регистрами;
	|v 4.1 - Добавлены процедуры исправления по результату контроля по объектам расчетов;
	|v 4.0 - Добавлен контроль по объектам взаиморасчетов, подправлены контроли по суммам взаиморасчетов;
	|v 3.1 - Из проверки сумм взаиморасчетов исключены Ретробонусы как вываливающиеся из стандартного учета;
	|v 3.0 - Изменен отчет по контролю сумм ""Провера соответствия сумм рег.учета и регистров"": добавлен для контроля регистры РасчетыСКлиентами/РасчетыСПОставщиками;
	|v 2.3 - Исправление ошибок: граница в отрицательных, учет плановых данных в проверке присутствия движений;
	|v 2.2 - Мелкие доработки;
	|v 2.1 - Подправлен вариант ""ПроверкаКорректностиВзаиморасчетов"": перенесены контроли по валютным счетам, подправлен контроль по договорам;
	|v 2.0 - Добавлены контрольные отчеты по регистрам и проводкам:
	|   *** Развернутое сальдо взаиморасчетов (регистры) - Проверяются регистры по срокам на присутствии одновременно сумм предоплат и договоров;
	|   *** Проверка соответствия сумм рег.учета и регистров - проверка на соответствие (совпадение) сумм проводок, регистров расчетов по срокам;
	|   *** Контроль отсутствия движений взаиморасчетов у документов - контроль отсутствие движений регистров расчетов и расчетов по срокам у проведенных документов;
	|   *** Контроль отриц.остатков в расчетах по срокам - контроль отрицательных остатков по дням в Расчетах по срокам;
	|v 1.1 - Мелкие доработки для удобства;
	|v 1.0 - Два отчета за период: 
	|   *** Развернутое сальдо взаиморасчетов - показывает развернутое сальдо по контрагенту/договору на конец месяца по счетам и валютам;
	|   *** Проверка корректности взаиморасчетов - здесь можно увидеть ошибки несоответствия валют, в документах, счетах, договорах. 
	|       Состоит из нескольких разделов: 
	|        1. Обороты по счетам нерезидентов – покажет по каким контрагентом со статусом нерезидент были обороты в данном месяце. Можно пробежать глазами, что группа фин.учета в договоре соответствует счету, что контрагент и правда нерезидент, основные ошибки покажет в колонке по ошибкам. 
	|        2. Обороты по валютным счетам – покажет по каким контрагентам были обороты по валютным счетам за месяц. Можно посмотреть, попали ли сюда только контрагенты с валютными оборотами, опять таки соответствие групп фин.учета и счетов, основные ошибки, например, по несоответствие валют, будет выведено в колонке. 
	|        3. Ошибки взаиморасчетов в регистре «Суммы документов в валютах учета» - этот раздел показывает только ошибки (как он считает) по документам, у которых в регистре и в документе валюты различаются (это точно ошибка), или не совпадают валюты документа и взаиморасчетов (надо смотреть конкретный случай). 
	|        4. Ошибки взаиморасчетов в регистрах «Расчеты с клиентами/поставщиками» – этот раздел показывает только ошибки, связанные с незаполненными группами фин.учета в договорах, с валютами, если указан договор, но лег не на договор (здесь есть нюанс, я поправлю, иногда вываливает правильные). Также здесь он смотрит, и сравнивает с порядком расчетов, указанного в шапке, если в договоре отличается – выдаст как ошибку, но я б сказала проверку. 
	|'"); 
КонецФункции // ИнформацияИзмененийПоОбработке

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Снимаем пометку удаления у используемых договоров в Объектах расчетов,
// ставим флаг архивный
//
// Параметры
//  ПараметрыПоиска - <Структура> - параметры поиска объектов для исправления
//                    ключи поиска: Организация, Период, Клиенты
//
Процедура ИсправлениеОбъектов_ПомеченныеНаУдаленияДоговора(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта
	|ПОМЕСТИТЬ ОбъектыРасчетовОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ПериодОстатков, АналитикаУчетаПоПартнерам.Организация = &Организация) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетовОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОбъектыРасчетовОстатков.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК Договор,
	|	ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) КАК ТипДоговора
	|ИЗ
	|	ОбъектыРасчетовОстатков КАК ОбъектыРасчетовОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетовОстатков.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|	И ОбъектыРасчетов.Объект.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Организация",    ПараметрыПоиска.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков", Новый Граница(ПараметрыПоиска.Период, ВидГраницы.Включая));
	
	Если ПараметрыПоиска.Клиенты = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПоставщиками", "РасчетыСКлиентами");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоговорОбъект = Выборка.Договор.ПолучитьОбъект();
		ДоговорОбъект.ПометкаУдаления = Ложь;
		
		Если Выборка.ТипДоговора = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ДоговорОбъект.АрхивныйВBC_СИМ = Истина;
			ДоговорОбъект.ОсновнойТоварныйДоговоры_СИМ = Ложь;
			ДоговорОбъект.ВидДоговора_СИМ = Перечисления.ВидыДоговоров_СИМ.ПустаяСсылка();
		КонецЕсли;
		
		ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
		
		Если СтрНайти(ДоговорОбъект.Наименование, "не исп.") = 0 Тогда
			ДоговорОбъект.Наименование = "(не исп.) " + СокрЛП(ДоговорОбъект.Наименование);
		КонецЕсли;
		
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДоговорОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'НЕ удалось записать договор " + Выборка.Договор + "'");
			Сообщение.КлючДанных = Выборка.Договор;
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняем Объект расчета на основании  установленного Объекта
//
// Параметры
//  ПараметрыПоиска - <Структура> - параметры поиска объектов для исправления
//                    ключи поиска: Организация, Период, Клиенты
//
Процедура ИсправлениеОбъектов_НесовпадениеДанныхСОбъектом(ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.Валюта КАК Валюта
	|ПОМЕСТИТЬ ОбъектыРасчетовОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ПериодОстатков, АналитикаУчетаПоПартнерам.Организация = &Организация) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетовОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОбъектыРасчетовОстатков.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ТипРасчетов КАК ОРТипРасчетов,
	|	ОбъектыРасчетов.ТипОбъектаРасчетов КАК ОРТипОбъектаРасчетов,
	|	ОбъектыРасчетов.Организация КАК ОРОрганизация,
	|	ОбъектыРасчетов.Контрагент КАК ОРКонтрагент,
	|	ОбъектыРасчетов.Договор КАК ОРДоговор,
	|	ОбъектыРасчетов.Партнер КАК ОРПартнер,
	|	ОбъектыРасчетов.Номер КАК ОРНомер,
	|	ОбъектыРасчетов.Дата КАК ОРДата,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект.Номер, """") КАК ОбъектНомер,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОбъектДата,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект.Организация, НЕОПРЕДЕЛЕНО) КАК ОбъектОрганизация,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект.Контрагент, НЕОПРЕДЕЛЕНО) КАК ОбъектКонтрагент,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект.Партнер, НЕОПРЕДЕЛЕНО) КАК ОбъектПартнер,
	|	ВЫБОР
	|		КОГДА ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|			ТОГДА ОбъектыРасчетов.Объект
	|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Объект.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	КОНЕЦ КАК ОбъектДоговор,
	|	ЕСТЬNULL(ОбъектыРасчетов.Объект, НЕОПРЕДЕЛЕНО) КАК Объект
	|ПОМЕСТИТЬ ДанныеДляПроверки
	|ИЗ
	|	ОбъектыРасчетовОстатков КАК ОбъектыРасчетовОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетовОстатков.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПроверки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеДляПроверки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеДляПроверки.Объект КАК Объект
	|ИЗ
	|	ДанныеДляПроверки КАК ДанныеДляПроверки
	|ГДЕ
	|	НЕ(ДанныеДляПроверки.ОРНомер = ДанныеДляПроверки.ОбъектНомер
	|				И ДанныеДляПроверки.ОРДата = ДанныеДляПроверки.ОбъектДата
	|				И ДанныеДляПроверки.ОРОрганизация = ДанныеДляПроверки.ОбъектОрганизация
	|				И ДанныеДляПроверки.ОРКонтрагент = ДанныеДляПроверки.ОбъектКонтрагент
	|				И ДанныеДляПроверки.ОРПартнер = ДанныеДляПроверки.ОбъектПартнер
	|				И ДанныеДляПроверки.ОРДоговор = ДанныеДляПроверки.ОбъектДоговор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляПроверки.АналитикаУчетаПоПартнерам,
	|	ДанныеДляПроверки.ОбъектРасчетов,
	|	ДанныеДляПроверки.Объект
	|ИЗ
	|	ДанныеДляПроверки КАК ДанныеДляПроверки
	|ГДЕ
	|	ДанныеДляПроверки.ОРТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
	|	И ВЫРАЗИТЬ(ДанныеДляПроверки.ОРДоговор КАК Справочник.ДоговорыКонтрагентов).ТипДоговора В (&ТипыДоговора)
	|	И (НЕ ДанныеДляПроверки.ОРТипРасчетов = &ТипРасчетов
	|			ИЛИ (ДанныеДляПроверки.ОРТипРасчетов = НЕОПРЕДЕЛЕНО
	|				ИЛИ ДанныеДляПроверки.ОРТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)))
	|";
	
	Запрос.УстановитьПараметр("Организация",    ПараметрыПоиска.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков", Новый Граница(ПараметрыПоиска.Период, ВидГраницы.Включая));
	
	ТипыДоговора = Новый СписокЗначений;
	Если ПараметрыПоиска.Клиенты = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПоставщиками", "РасчетыСКлиентами");
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		
		Для каждого ТипДоговора Из Перечисления.ТипыДоговоров Цикл
			Если Перечисления.ТипыДоговоров.ЭтоДоговорПродажи(ТипДоговора) Тогда
				ТипыДоговора.Добавить(ТипДоговора);
			КонецЕсли;
		КонецЦикла;
		ТипыДоговора.Добавить(Перечисления.ТипыДоговоров.РеализацияЧерезКомиссионера);
		
	Иначе
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
		
		Для каждого ТипДоговора Из Перечисления.ТипыДоговоров Цикл
			Если Перечисления.ТипыДоговоров.ЭтоДоговорЗакупки(ТипДоговора) Тогда
				ТипыДоговора.Добавить(ТипДоговора);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипРасчетов",  ТипРасчетов);
	Запрос.УстановитьПараметр("ТипыДоговора", ТипыДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДополненныеПараметры = ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(Выборка.Объект);
		ПараметрыВзаиморасчеты = ДополненныеПараметры.МассивПараметров;
		
		ОбъектОбъекта = Выборка.Объект.ПолучитьОбъект();
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		Отказ = Ложь;
		
		НачатьТранзакцию();
		Попытка
			ОбъектыРасчетовСервер.ПроверитьОбъектыРасчетовПередЗаписью(
				ОбъектОбъекта, ПараметрыВзаиморасчеты, РежимЗаписи, Отказ);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СохраненныеВариантыОтчетаПользователя

Функция ПроверитьГлУзелСохраненныхВариантовОтчета() Экспорт
	
	МетаданныеОбъекта = ЭтотОбъект.Метаданные();
	ИмяМетаданного = МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный)
	|	И ВариантыОтчетов.Отчет = &ИмяОтчета
	|	И ВариантыОтчетов.КлючВарианта = &Ключ
	|	И ВариантыОтчетов.Родитель = ЗНАЧЕНИЕ(Справочник.ВариантыОтчетов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ИмяОтчета", ИмяМетаданного);
	Запрос.УстановитьПараметр("Ключ",      ИмяМетаданного);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// создадим гл.узел, который и будем потом использовать
		ГлУзел = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ГлУзел.Наименование         = МетаданныеОбъекта.Синоним;
		ГлУзел.КлючВарианта         = ИмяМетаданного;
		ГлУзел.Отчет                = ИмяМетаданного;
		ГлУзел.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
		ГлУзел.ВидимостьПоУмолчанию = Ложь;
		ГлУзел.ТолькоДляАвтора      = Ложь;
		ГлУзел.Записать();
		
		Возврат ГлУзел.Ссылка;
		
	Иначе
		// здесь проверим, что узел не помечен на удаление, если что снимаем пометку
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ГлУзел = Выборка.Ссылка;
		
		Если Выборка.ПометкаУдаления Тогда
			ОбъектГлУзел = ГлУзел.ПолучитьОбъект();
			ОбъектГлУзел.ПометкаУдаления = Ложь;
			ОбъектГлУзел.Записать();
		КонецЕсли;
		
		Возврат ГлУзел;
		
	КонецЕсли;
КонецФункции

// формируем сохраненных список настроек пользователя в базе
Процедура СформироватьСписокСохраненныхНастроекПользователя(НастройкиОтчета, СохраненныеНастройки = Неопределено) Экспорт
	
	// выбираем все настройки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Ссылка КАК Настройка,
	|	ВариантыОтчетов.Автор,
	|	ВариантыОтчетов.Описание,
	|	НЕ ВариантыОтчетов.ТолькоДляАвтора КАК ДляВсехПользователей,
	|	ВариантыОтчетов.Пользовательский КАК БыстрыйВыбор
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Родитель = &Родитель
	|	И ВЫБОР
	|			КОГДА ВариантыОтчетов.ТолькоДляАвтора
	|					И &Автор <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ВариантыОтчетов.Автор = &Автор
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Запрос.УстановитьПараметр("Родитель",     НастройкиОтчета.ГлУзелВариантовОтчета);
	Запрос.УстановитьПараметр("Отчет",        НастройкиОтчета.ИмяВнешнейОбработки);
	Запрос.УстановитьПараметр("КлючВарианта", НастройкиОтчета.ИмяТекущейСхемыСКД + "." + НастройкиОтчета.ИмяВариантаОтчета);
	Запрос.УстановитьПараметр("Автор",        ?(РольДоступна("ПолныеПрава"), Неопределено, ПараметрыСеанса.ТекущийПользователь));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если СохраненныеНастройки = Неопределено Тогда
		СохраненныеНастройкиПользователей.Загрузить(Выборка);
	Иначе
		СохраненныеНастройки.Загрузить(Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВыбраннуюНастройкуПользователя(НастройкиОтчета) Экспорт
	
	СохраненныйВариант = НастройкиОтчета.СохраненныйВариант;
	Если НЕ ЗначениеЗаполнено(СохраненныйВариант) Тогда
		Возврат;
	КонецЕсли; 
	НастройкаПользователя = СохраненныйВариант.Настройки.Получить();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикНастроек.Восстановить();
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаПользователя);
	
	ПримененияПараметровСКД();
	УстановкаОтборовСКД(НастройкиОтчета);
	
	Титл = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title");
	ТитлПоУмолчанию = ?(ЗначениеЗаполнено(ЭтотОбъект.Метаданные().Синоним), СокрЛП(ЭтотОбъект.Метаданные().Синоним), "Отчет-Анализ");
	НастройкиОтчета.ПредставлениеВарианта = ?(ЗначениеЗаполнено(Титл.Значение), СокрЛП(Титл.Значение), ТитлПоУмолчанию);
	
	НастройкиОтчета.АдресНастроекКомпановщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция ПроверитьНаименованиеВариантаОтчетаНаДубль(НаименованиеОтчета, НастройкиОтчета, НайденныйВариант) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Наименование = &Наименование
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Родитель = &Родитель
	|	И ВЫБОР
	|			КОГДА ВариантыОтчетов.ТолькоДляАвтора
	|				ТОГДА ВариантыОтчетов.Автор = &Автор
	|			ИНАЧЕ НЕ ВариантыОтчетов.ТолькоДляАвтора
	|		КОНЕЦ
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Запрос.УстановитьПараметр("Родитель",     НастройкиОтчета.ГлУзелВариантовОтчета);
	Запрос.УстановитьПараметр("Отчет",        ЭтотОбъект.Метаданные().Имя);
	Запрос.УстановитьПараметр("КлючВарианта", НастройкиОтчета.ИмяТекущейСхемыСКД + "." + НастройкиОтчета.ИмяВариантаОтчета);
	Запрос.УстановитьПараметр("Автор",        ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Наименование", НаименованиеОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НайденныйВариант = Выборка.Настройка;
		Возврат Истина;
	Иначе
		НайденныйВариант = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область РаботаСоСхемойКомпановкиДанных

// получает текст вида ИмяОтчета.ИмяСКД для поиска по сохраненным настройкам
Функция ПолучитьИмяСхемыСКД_Текст(Полное = Истина) Экспорт
	// находим выбранный вариант
	ИмяСхемы = "";
	Для каждого Стр Из ВариантыОтчетов Цикл
		Если Стр.Используется Тогда
			ИмяСхемы = СокрЛП(Стр.ИмяСхемы);
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ЗначениеЗаполнено(ИмяСхемы) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИмяОтчета = СокрЛП(ЭтотОбъект.Метаданные().Имя);
	Возврат ?(Полное, ИмяОтчета + "." + ИмяСхемы, ИмяСхемы);
	
КонецФункции

// Формируем список всех используемых вариантов всех СКД в один список
Процедура СформироватьСписокВариантовОтчета(СписокВыбораВариантов = Неопределено, ВариантыКоллекцияФормы = Неопределено)  Экспорт
	
	МакетыОтчета = ЭтотОбъект.Метаданные().Макеты;
	Для каждого МакетОтчета Из МакетыОтчета Цикл
		Если Строка(МакетОтчета.ТипМакета) = "СхемаКомпоновкиДанных" И Найти(СокрЛП(МакетОтчета.Комментарий),"НеПоказывать") = 0 Тогда
			СхемаСКД = ПолучитьМакет(МакетОтчета.Имя);
			Для каждого Вариант Из СхемаСКД.ВариантыНастроек Цикл
				// расшифровки отчетов как варианты самого отчета
				Если СтрНайти(Вариант.Имя, "Расшифровка") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// и сохраняем в тз, чтоб потом отыскать в случае чего
				НоваяСтрока = ВариантыОтчетов.Добавить();
				НоваяСтрока.ИндексВарианта = СхемаСКД.ВариантыНастроек.Индекс(Вариант);
				НоваяСтрока.ИмяСхемы = МакетОтчета.Имя;
				НоваяСтрока.ИмяВарианта = Вариант.Имя;
				НоваяСтрока.Представление = Вариант.Представление;
				НоваяСтрока.Слой = МакетОтчета.Синоним; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ВариантыКоллекцияФормы <> Неопределено Тогда
		ЗначениеВДанныеФормы(ВариантыОтчетов, ВариантыКоллекцияФормы);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьУказанныйВариантСКД(НастройкиОтчета) Экспорт
	// находим выбранный вариант
	Найденный = ВариантыОтчетов.Найти(НастройкиОтчета.ИмяВариантаОтчета, "ИмяВарианта");
	Если Найденный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр Из ВариантыОтчетов Цикл
		Стр.Используется = Ложь;
	КонецЦикла; 
	Найденный.Используется = Истина;
	НастройкиОтчета.ИндексВариантаОтчета = ВариантыОтчетов.Индекс(Найденный);
	
	НастройкиОтчета.ИмяТекущейСхемыСКД = Найденный.ИмяСхемы;
	СхемаСКД = ПолучитьМакет(НастройкиОтчета.ИмяТекущейСхемыСКД);
	ВариантОтчета = СхемаСКД.ВариантыНастроек[Найденный.ИндексВарианта];
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикНастроек.Восстановить();
	
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Клиенты", ?(НастройкиОтчета.Свойство("Клиенты"), НастройкиОтчета.Клиенты, Ложь));
	
	ПримененияПараметровСКД(СтруктураПараметров);
	УстановкаОтборовСКД(НастройкиОтчета);
	
	Титл = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title");
	ТитлПоУмолчанию = ?(ЗначениеЗаполнено(ЭтотОбъект.Метаданные().Синоним), СокрЛП(ЭтотОбъект.Метаданные().Синоним), "Отчет-Анализ");
	НастройкиОтчета.ПредставлениеВарианта = ?(ЗначениеЗаполнено(Титл.Значение), СокрЛП(Титл.Значение), ТитлПоУмолчанию);
	
	НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(СхемаСКД, Новый УникальныйИдентификатор);
	НастройкиОтчета.АдресНастроекКомпановщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор);
	
	//ИмяТекущейСхемы = ПолучитьИмяСхемыСКД_Текст();
	СформироватьСписокСохраненныхНастроекПользователя(НастройкиОтчета);
	
КонецПроцедуры

#Область ОтборыИПараметрыСКД

// Установка параметров Компоновщика
Функция ПримененияПараметровСКД(СтруктураПараметров = Неопределено) Экспорт
	ТекстПериодаДляОтчета = "";
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если ПолеПараметра <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"), 
			?(Период = '00010101', Дата("39991001"), КонецДня(Период)));
		ТекстПериодаДляОтчета = " на " + Формат(Период, "ДФ='dd.MM.yyyy ""г.""'");
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	Если ПолеПараметра <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"), НачалоПериода);
		ТекстПериодаДляОтчета = " за " + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Если ПолеПараметра <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"), 
			?(КонецПериода = '00010101', Дата("39991001"), КонецДня(КонецПериода)));
	КонецЕсли;
	
	// нестандартные параметры
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Организация");
	Если ПолеПараметра <> Неопределено Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"), Организация);
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РеглВалюта");
	Если ПолеПараметра <> Неопределено Тогда
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РеглВалюта"), ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетаВзаиморасчетовПоставщики");
	Если ПолеПараметра <> Неопределено Тогда
		СчетаВзаиморасчетовПоставщики = Новый Массив;
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);                          // 60.01 Расчеты с поставщиками и подрядчиками
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);                      // 60.02 Расчеты по авансам выданным
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);                       // 60.21 Расчеты с поставщиками и подрядчиками (в валюте)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);                   // 60.22 Расчеты по авансам выданным (в валюте)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);                        // 60.31 Расчеты с поставщиками и подрядчиками (в у.е.)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);                    // 60.32 Расчеты по авансам выданным (в у.е.)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);   // 76.25 Расчеты с прочими поставщиками и подрядчиками (в валюте)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);    // 76.35 Расчеты с прочими поставщиками и подрядчиками (в у.е.)
		СчетаВзаиморасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);      // 76.05 Расчеты с прочими поставщиками и подрядчиками
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СчетаВзаиморасчетовПоставщики"), СчетаВзаиморасчетовПоставщики);
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетаВзаиморасчетовКлиенты");
	Если ПолеПараметра <> Неопределено Тогда 
		СчетаВзаиморасчетовКлиенты = Новый Массив;
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);                         // 62.01 Расчеты с покупателями и заказчиками
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);                   // 62.02 Расчеты по авансам полученным
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);                      // 62.21 Расчеты с покупателями и заказчиками (в валюте)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);                // 62.22 Расчеты по авансам полученным (в валюте)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);                       // 62.31 Расчеты с покупателями и заказчиками (в у.е.)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);                 // 62.32 Расчеты по авансам полученным (в у.е.)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);   // 76.26 Расчеты с прочими покупателями и заказчиками (в валюте)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);    // 76.36 Расчеты с прочими покупателями и заказчиками (в у.е.)
		СчетаВзаиморасчетовКлиенты.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);      // 76.06 Расчеты с прочими покупателями и заказчиками
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СчетаВзаиморасчетовКлиенты"), СчетаВзаиморасчетовКлиенты);
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетаВзаиморасчетыОбщие");
	Если ПолеПараметра <> Неопределено Тогда 
		СчетаВзаиморасчетыОбщие = Новый Массив;
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);                            // 76.02 Расчеты по претензиям
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);                         // 76.22 Расчеты по претензиям (в валюте)
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);                          // 76.32 Расчеты по претензиям (в у.е.)
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);    // 76.09 Прочие расчеты с разными дебиторами и кредиторами
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); // 76.29 Прочие расчеты с разными дебиторами и кредиторами (в валюте)
		СчетаВзаиморасчетыОбщие.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);  // 76.39 Прочие расчеты с разными дебиторами и кредиторами (в у.е.)
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СчетаВзаиморасчетыОбщие"), СчетаВзаиморасчетыОбщие);
	КонецЕсли;
	
	ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТипРасчетов");
	Если ПолеПараметра <> Неопределено Тогда 
		Если СтруктураПараметров.Клиенты Тогда
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ТипРасчетов"), 
				Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			);
		Иначе
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ТипРасчетов"), 
				Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком
			);
		КонецЕсли;
	КонецЕсли;
	
	// вставляем параметры, переданные в структуре
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого элПараметр Из СтруктураПараметров Цикл
			ПолеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(элПараметр.Ключ);
			Если ПолеПараметра <> Неопределено Тогда
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
					Новый ПараметрКомпоновкиДанных(элПараметр.Ключ), 
					элПараметр.Значение
				);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТекстПериодаДляОтчета;
	
КонецФункции

Процедура УстановкаОтборовСКД(НастройкиОтчета) Экспорт
	Если НастройкиОтчета.ИмяВариантаОтчета = "ВыборкаСпецификацийДляОтчета" И НастройкиОтчета.НастройкиОтбора.Количество() <> 0 Тогда
		Для каждого Эл Из НастройкиОтчета.НастройкиОтбора Цикл
			НастройкаОтбораИзДанныхОсновнойформы(Эл.Ключ, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Эл.Значение, Истина);
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура НастройкаОтбораИзДанныхОсновнойформы(ИмяПоляОтбора, ВидСравненияОтбора, ЗначениеОтбора, ИспользованиеОтбора) Экспорт 
	ЭлементыОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ДоступныеПоляОтбораСКД = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	
	// проверяем на возможность проставления отбора
	Если ДоступныеПоляОтбораСКД.НайтиПоле(ПолеОтбора) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// сначало попробуем найти
	Для каждого ЭлОтбора Из ЭлементыОтбораСКД Цикл
		Попытка
			Если ЭлОтбора.ЛевоеЗначение = ПолеОтбора Тогда
				ЭлементОтбора = ЭлОтбора;
				Прервать;
			КонецЕсли;
		Исключение
			// в этом случае это группа
		КонецПопытки;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено И ИспользованиеОтбора Тогда
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИначеЕсли ЭлементОтбора = Неопределено И НЕ ИспользованиеОтбора Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	ЭлементОтбора.Использование  = ИспользованиеОтбора;
	ЭлементОтбора.ВидСравнения   = ВидСравненияОтбора;
	ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	
КонецПроцедуры

#КонецОбласти 

// Формирование отчета СКД
Функция СформироватьОтчет(Результат, НастройкиОтчета, ДанныеРасшифровки = Неопределено, ВыгружатьВТЗ = Ложь, ВнешниеДанные = Неопределено, СтруктураПараметров = Неопределено) Экспорт
	
	Результат.Очистить();
	
	СхемаСКД = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	Если НастройкиОтчета.Свойство("Клиенты") Тогда
		Если НастройкиОтчета.ИмяТекущейСхемыСКД = "РазвернутоеСальдоПоСчетамИРегистру" Тогда
			Для каждого ИсточникДанных Из СхемаСКД.НаборыДанных Цикл
				Если ИсточникДанных.Имя = "ПоРегистрам" Тогда
					Если НастройкиОтчета.Клиенты = Истина Тогда
						ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСПоставщикамиПоСрокам", "РасчетыСКлиентамиПоСрокам");
					Иначе
						ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСКлиентамиПоСрокам", "РасчетыСПоставщикамиПоСрокам");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОтсутствияДвиженийРегистровВзаимДокументов" 
				ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОтрицательныхОстатковПоСрокам" Тогда
				
			Для каждого ИсточникДанных Из СхемаСКД.НаборыДанных Цикл
				Если НастройкиОтчета.Клиенты = Истина Тогда
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСПоставщикамиПоСрокам", "РасчетыСКлиентамиПоСрокам");
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСПоставщиками", "РасчетыСКлиентами");
				Иначе
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСКлиентамиПоСрокам", "РасчетыСПоставщикамиПоСрокам");
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСКлиентами", "РасчетыСПоставщиками");
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОбъектовРасчетаВзаиморасчетов" Тогда
			Для каждого ИсточникДанных Из СхемаСКД.НаборыДанных Цикл
				Если НастройкиОтчета.Клиенты = Истина Тогда
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСПоставщиками", "РасчетыСКлиентами");
				Иначе
					ИсточникДанных.Запрос = СтрЗаменить(ИсточникДанных.Запрос, "РасчетыСКлиентами", "РасчетыСПоставщиками");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресНастроекКомпановщика);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	КомпоновщикНастроек.Восстановить();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Клиенты", ?(НастройкиОтчета.Свойство("Клиенты"), НастройкиОтчета.Клиенты, Ложь));
	
	ТекстПериодаДляОтчета = ПримененияПараметровСКД(СтруктураПараметров);
	УстановкаОтборовСКД(НастройкиОтчета);
	
	// добавим в заголовок дату формирования отчета
	Если ТекстПериодаДляОтчета <> "" Тогда
		Титл = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title");
		Если НастройкиОтчета.ИмяТекущейСхемыСКД = "РазвернутоеСальдоПоСчетамИРегистру" 
				ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "ПроверкаСуммПроводокИРегистров" Тогда
				
			Титл.Значение = НастройкиОтчета.ПредставлениеВарианта + ?(СтрДлина(НастройкиОтчета.ПредставлениеВарианта) > 100, Символы.ПС, "") 
				+ " на конец " + Формат(Период, "ДФ='MMMM yyyy ''г.'''"); 
				
			СменитьВидВЗаголовке = (НастройкиОтчета.ИмяВариантаОтчета = "РазвернутыеРегистрыВзаиморасчетовПоОрганизации"
				ИЛИ НастройкиОтчета.ИмяВариантаОтчета = "КонтрольОбъектовРасчетаВзаиморасчетов"
				ИЛИ НастройкиОтчета.ИмяВариантаОтчета = "КонтрольОтрицательныхОстатковПоСрокам");
				
			Если НастройкиОтчета.Свойство("Клиенты") И СменитьВидВЗаголовке Тогда
				Титл.Значение = ?(НастройкиОтчета.Клиенты,  СтрЗаменить(Титл.Значение, "поставщик", "клиент"), СтрЗаменить(Титл.Значение, "клиент", "поставщик"));
			КонецЕсли;
		Иначе
			Титл.Значение = НастройкиОтчета.ПредставлениеВарианта + ?(СтрДлина(НастройкиОтчета.ПредставлениеВарианта) > 100, Символы.ПС, "") 
				+ ТекстПериодаДляОтчета;
		КонецЕсли;
	КонецЕсли; 
	
	// определяем расшифровку
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,, 
		?(ВыгружатьВТЗ, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Тип("ГенераторМакетаКомпоновкиДанных")));
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ТипЗнч(ВнешниеДанные) = Тип("Структура") Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки, Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	КонецЕсли; 
	
	//Создадим и инициализируем процессор вывода результата
	Если ВыгружатьВТЗ Тогда
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	КонецЕсли; 
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(СхемаСКД, Новый УникальныйИдентификатор);
	НастройкиОтчета.АдресНастроекКомпановщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор);
	НастройкиОтчета.АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти 

#Область РаботаССохраненнымиНастройками

Функция НачальныеНастройки()
	// заполняем что-то сами, если настройки не нашлись
	Попытка
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Процедура ПроверкаЗаполненийНастроек()
	// проверка после заполнения настроек
КонецПроцедуры

//--------------------------------------------------

Функция СоздатьСтруктуруСохраненияНастроек() Экспорт
	
	СтруктураСохранения = Новый Структура(ЭтотОбъект.СохраняемыеДанные);
	Для каждого Эл Из СтруктураСохранения Цикл
		Реквизит = ЭтотОбъект[Эл.Ключ];
		Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(Эл.Ключ) <> Неопределено Тогда
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ЭтотОбъект[Эл.Ключ].Выгрузить();
			СтруктураСохранения.Вставить(Эл.Ключ, ТЗ);
		Иначе
			СтруктураСохранения.Вставить(Эл.Ключ, Реквизит);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СтруктураСохранения;
	
КонецФункции // СоздатьСтруктуруСохраненияНастроек

Процедура СохранитьФайлНастроек(СтруктураСохранения = Неопределено) Экспорт
	
	Если СтруктураСохранения = Неопределено Тогда
		СтруктураСохранения = СоздатьСтруктуруСохраненияНастроек();
	КонецЕсли; 
	
	// сохраняем в базу в справочник настроек отчетов
	УстановитьПривилегированныйРежим(Истина);
	ОбъектНастроек = ЭтотОбъект.Метаданные().Имя;
	СпНастроек = Справочники.ВариантыОтчетов.НайтиПоРеквизиту("КлючВарианта", ИдентификаторСохраненияНастроек);
	Если НЕ ЗначениеЗаполнено(СпНастроек) Тогда
		ОбъектНастройки = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ОбъектНастройки.Родитель             = ПроверитьГлУзелСохраненныхВариантовОтчета();
		ОбъектНастройки.Наименование         = "Общая Настройка для Пользователей";
		ОбъектНастройки.КлючВарианта         = ИдентификаторСохраненияНастроек;
		ОбъектНастройки.Отчет                = ЭтотОбъект.Метаданные().Имя;
		ОбъектНастройки.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
		ОбъектНастройки.ВидимостьПоУмолчанию = Ложь;
		ОбъектНастройки.ТолькоДляАвтора      = Ложь;
	Иначе
		ОбъектНастройки = СпНастроек.ПолучитьОбъект();
	КонецЕсли; 
	
	ОбъектНастройки.Автор    = ПараметрыСеанса.ТекущийПользователь;
	ОбъектНастройки.Описание = "Изменен: " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:MM'");
	
	// допихиваем настройки
	ОбъектНастройки.Настройки = Новый ХранилищеЗначения(СтруктураСохранения, Новый СжатиеДанных(9));
	
	Попытка
		ОбъектНастройки.Записать();
	Исключение
		#Если Клиент Тогда
			Сообщить("Не удалось записать настройку в базу!", СтатусСообщения.Внимание);
			Отказ = Истина;
		#КонецЕсли
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПрочитатьФайлНастроек() Экспорт
	Перем НайденноеЗначение;
	
	// считываем настройки для обработки
	УстановитьПривилегированныйРежим(Истина);
	СпНастроек = Справочники.ВариантыОтчетов.НайтиПоРеквизиту("КлючВарианта", ИдентификаторСохраненияНастроек);
	Если НЕ ЗначениеЗаполнено(СпНастроек) Тогда
		Выполнено = НачальныеНастройки();
		Если НЕ Выполнено Тогда
			#Если Клиент Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось получить настройки!" + Символы.ПС + "Следует их заполнить и сохранить!";
				Сообщение.Сообщить();
			#КонецЕсли
			Возврат;
		КонецЕсли;
		СохранитьФайлНастроек();
	КонецЕсли; 
	
	Попытка
		СтруктураНастроек = СпНастроек.Настройки.Получить();
	Исключение
		#Если Клиент Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось получить настройки!" + Символы.ПС + "Следует их заполнить и сохранить!";
			Сообщение.Сообщить();
		#КонецЕсли
		Возврат;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураСохранения = Новый Структура(СохраняемыеДанные);
	Попытка
		Для каждого ЭлСтрукт Из СтруктураСохранения Цикл
			Если СтруктураНастроек.Свойство(ЭлСтрукт.Ключ, НайденноеЗначение) Тогда
				Если ТипЗнч(НайденноеЗначение) = Тип("ТаблицаЗначений") Тогда
					ЭтотОбъект[ЭлСтрукт.Ключ].Загрузить(НайденноеЗначение);
				ИначеЕсли ТипЗнч(НайденноеЗначение) = Тип("ДеревоЗначений") Тогда
					Если НайденноеЗначение.Строки.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли; 
					ЭтотОбъект[ЭлСтрукт.Ключ] = НайденноеЗначение.Скопировать();
				Иначе
					ЭтотОбъект[ЭлСтрукт.Ключ] = НайденноеЗначение;
				КонецЕсли; 
			Иначе
				ЗаписьЖурналаРегистрации("Ошибка", УровеньЖурналаРегистрации.Ошибка,,"ВнешняяОбработка."
					+ ЭтотОбъект.Метаданные().Имя, "Не удалось заполнить настройки!");
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	КонецПопытки; 
	
	ПроверкаЗаполненийНастроек();
	
КонецПроцедуры

#КонецОбласти 

Процедура НачальноеЗаполнениеОтчета(НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ИмяВнешнейОбработки = ЭтотОбъект.Метаданные().Имя;
	ИдентификаторСохраненияНастроек = "SaveReportOnlineSettlementsChif";
	СохраняемыеДанные = "";
	
	ПрочитатьФайлНастроек();
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid object call on client'");
#КонецЕсли
