////////////////////////////////////////////////////////////////////////////////
// Стандартный функционал


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ДопНастройки;
	Если Параметры.Свойство("АвтоТест") ИЛИ НЕ Параметры.Свойство("НастройкиОтчета") Тогда
		Возврат;
	КонецЕсли;
		
	НастройкиОтчета 	 = Параметры.НастройкиОтчета;
	РасширеннаяНастройка = НастройкиОтчета.РасширеннаяНастройка;
	ВидПериода 			 = Параметры.Дополнительно.ВидПериода;
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
		
	Если ЗначениеЗаполнено(НастройкиОтчета.ПредставлениеВарианта) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменение варианта отчета ""%1""'"), НастройкиОтчета.ПредставлениеВарианта);
	КонецЕсли;
	
	Если Параметры.Свойство("Дополнительно", ДопНастройки) И ТипЗнч(ДопНастройки) = Тип("Структура") Тогда
		Для каждого Элем Из ДопНастройки Цикл
			Если Элем.Ключ = "Отчет" Тогда
				ОтчетПереданный = Элем.Значение;
				Для каждого ЭлементОтчета  Из ОтчетПереданный Цикл
					Если ТипЗнч(ЭлементОтчета.Значение) = Тип("ДанныеФормыКоллекция") Тогда
						ТЗ = Новый ТаблицаЗначений;
						ТЗ = ЭлементОтчета.Значение.Выгрузить();
						ОтчетСсылка[ЭлементОтчета.Ключ].Загрузить(ТЗ);
					Иначе 
						ОтчетСсылка[ЭлементОтчета.Ключ] = ЭлементОтчета.Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Попытка ЭтотОбъект[Элем.Ключ] = Элем.Значение Исключение КонецПопытки; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Новый НастройкиКомпоновкиДанных);
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.ТекущаяСтрока <> Неопределено Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущуюСтроку", 0.1, Истина);
	КонецЕсли;

	// для периода месяц
	МесяцСтрока = ДатаКакМесяцПредставление(НачалоМесяца(ОтчетСсылка.Период));
	// для периода квартал
	КварталСтрока = ДатаКакКварталПредставление(НачалоКвартала(ОтчетСсылка.Период));	
	
	УправлениеВидимостьюФормы();	
	УстановитьВидимостьПанелиРасширеннойНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	Если МодальныйРежим
		Или РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		Или ВладелецФормы = Неопределено Тогда
		Закрыть(Истина);
	Иначе
		РезультатВыбора = Новый Структура;
		РезультатВыбора.Вставить("ВариантМодифицирован", ВариантМодифицирован);
		РезультатВыбора.Вставить("ПользовательскиеНастройкиМодифицированы", ВариантМодифицирован Или ПользовательскиеНастройкиМодифицированы);
		РезультатВыбора.Вставить("МодифицированныРеквизитыОтчета", МодифицированныРеквизитыОтчета);		
		
		#Если ВебКлиент Тогда
			РезультатВыбора.ВариантМодифицирован = Истина; // Для платформы.
			РезультатВыбора.ПользовательскиеНастройкиМодифицированы = Истина;
		#КонецЕсли
		
		Если РезультатВыбора.ВариантМодифицирован Тогда
			РезультатВыбора.Вставить("НастройкиКД", Отчет.КомпоновщикНастроек.Настройки);
		КонецЕсли;
		Если РезультатВыбора.ПользовательскиеНастройкиМодифицированы Тогда
			РезультатВыбора.Вставить("СброситьПользовательскиеНастройки", Истина);
		КонецЕсли;
		
		Если РезультатВыбора.МодифицированныРеквизитыОтчета Тогда
			ОтчетСтруктура = Новый Структура(ОтчетСсылка.СохраняемыеДанные);
			Для каждого Элем  Из ОтчетСтруктура Цикл
				ОтчетСтруктура[Элем.Ключ] = ОтчетСсылка[Элем.Ключ];
			КонецЦикла;
			
			ОтчетСтруктура.Вставить("Период", 			ОтчетСсылка.Период);
			ОтчетСтруктура.Вставить("НачалоПериода", 	ОтчетСсылка.НачалоПериода);
			ОтчетСтруктура.Вставить("КонецПериода", 	ОтчетСсылка.КонецПериода);
			
			РезультатВыбора.Вставить("Отчет", ОтчетСтруктура);
		КонецЕсли; 
		
		ОповеститьОВыборе(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранениеНастроекНаСервере()
	СтруктураСохранения = Новый Структура(ОтчетСсылка.СохраняемыеДанные);	
    Для каждого Эл Из СтруктураСохранения Цикл
        Реквизит = ОтчетСсылка[Эл.Ключ];
		Если ТипЗнч(Реквизит) = Тип("ДанныеФормыКоллекция") Тогда
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = Реквизит.Выгрузить();
        	СтруктураСохранения.Вставить(Эл.Ключ, ТЗ);
		Иначе
		    СтруктураСохранения.Вставить(Эл.Ключ, Реквизит);
		КонецЕсли; 
	КонецЦикла;
	
	РеквизитФормыВЗначение("ОтчетСсылка").СохранитьФайлНастроек(СтруктураСохранения);
	МодифицированныРеквизитыОтчета = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранениеНастроек(Команда)
	СохранениеНастроекНаСервере();
КонецПроцедуры

#КонецОбласти


#Область СтандартныйФункционал

&НаКлиенте
Процедура ПоляГруппировкиНедоступны()
	
	Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НедоступныеНастройкиПолейГруппировки;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляДоступны(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеВыбораУЭлемента(ЭлементСтруктуры) Тогда
				
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
			
		ЛокальныеВыбранныеПоля = Ложь;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;
			
	КонецЕсли;
		
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Ложь;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляНедоступны()
	
	ЛокальныеВыбранныеПоля = Ложь;
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
	Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиВыбранныхПолей;
					
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоступен(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйОтбор = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		ЛокальныйОтбор = Ложь;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;
			
	КонецЕсли;
			
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНедоступен()
	
	ЛокальныйОтбор = Ложь;
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
	Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиОтбора;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокДоступен(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеПорядкаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйПорядок = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		ЛокальныйПорядок = Ложь;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
	КонецЕсли;
			
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНедоступен()
	
	ЛокальныйПорядок = Ложь;
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
	Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НедоступныеНастройкиПорядка;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеДоступно(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеУсловногоОформленияУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		ЛокальноеУсловноеОформление = Ложь;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
	КонецЕсли;
			
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеНедоступно()
	
	ЛокальноеУсловноеОформление = Ложь;
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
	Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НедоступныеНастройкиУсловногоОформления;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаДоступны(ЭлементСтруктуры)
	
	Если Отчет.КомпоновщикНастроек.Настройки.НаличиеПараметровВыводаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		ЛокальныеПараметрыВывода = Ложь;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
	КонецЕсли;
			
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаНедоступны()
	
	ЛокальныеПараметрыВывода = Ложь;
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
	Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НедоступныеНастройкиПараметровВывода;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииПоля(Элемент)
		
	Перем ВыбраннаяСтраница;
	
	Если Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеВыбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПолейВыбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеОтбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаОтбора;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПорядка" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПорядка;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеУсловногоОформления" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаУсловногоОформления;
		
	ИначеЕсли Элементы.КомпоновщикНастроекНастройки.ТекущийЭлемент.Имя = "КомпоновщикНастроекНастройкиНаличиеПараметровВывода" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПараметровВывода;
		
	КонецЕсли;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		
		Элементы.СтраницыНастроек.ТекущаяСтраница = ВыбраннаяСтраница;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриАктивизацииСтроки(Элемент)
	
	ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	ТипЭлемента = ТипЗнч(ЭлементСтруктуры); 
	
	Если ТипЭлемента = Неопределено
		Или ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
		Или ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляНедоступны();
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеНедоступно();
		ПараметрыВыводаНедоступны();
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиКомпоновкиДанных")
		Или ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
		
		ЛокальныйОтбор = Истина;
		Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
		
		ЛокальныйПорядок = Истина;
		Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НастройкиПолейГруппировки;
		
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборДоступен(ЭлементСтруктуры);
		ПорядокДоступен(ЭлементСтруктуры);
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных")
		Или ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОтчету(Элемент)
	
	ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
	НастройкиЭлемента =  Отчет.КомпоновщикНастроек.Настройки.НастройкиЭлемента(ЭлементСтруктуры);
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = Отчет.КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(НастройкиЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеВыбранныеПоляПриИзменении(Элемент)
	
	Если ЛокальныеВыбранныеПоля Тогда
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;

		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьВыборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйОтборПриИзменении(Элемент)
	
	Если ЛокальныйОтбор Тогда
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;

		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьОтборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйПорядокПриИзменении(Элемент)
	
	Если ЛокальныйПорядок Тогда
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьПорядокЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальноеУсловноеОформлениеПриИзменении(Элемент)

	Если ЛокальноеУсловноеОформление Тогда
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьУсловноеОформлениеЭлемента(ЭлементСтруктуры);
					
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеПараметрыВыводаПриИзменении(Элемент)
	
	Если ЛокальныеПараметрыВывода Тогда
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
		ЭлементСтруктуры = Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока);
		Отчет.КомпоновщикНастроек.Настройки.ОчиститьПараметрыВыводаЭлемента(ЭлементСтруктуры);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяНастройкаПриИзменении(Элемент)
	УстановитьВидимостьПанелиРасширеннойНастройки();
	НастройкиОтчета.РасширеннаяНастройка = РасширеннаяНастройка;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьТекущуюСтроку()
	Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = Параметры.ТекущаяСтрока;
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьПанелиРасширеннойНастройки()
	
	// если настройка простая, то нечего смущать пользователей всякими непонятными полями
	Если РасширеннаяНастройка Тогда
		Если ТипЗнч(Элементы.КомпоновщикНастроекНастройки.Родитель) <> Тип("УправляемаяФорма") Тогда
			Элементы.Переместить(Элементы.КомпоновщикНастроекНастройки, ЭтаФорма, Элементы.ГруппаГлавная); 
		КонецЕсли; 
	Иначе
		Если ТипЗнч(Элементы.КомпоновщикНастроекНастройки.Родитель) = Тип("УправляемаяФорма") Тогда
			Элементы.Переместить(Элементы.КомпоновщикНастроекНастройки, Элементы.ГруппаДляКомпоновщика); 
		КонецЕсли;
		Элементы.КомпоновщикНастроекНастройки.ТекущаяСтрока = Отчет.КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли; 
	
	Элементы.СтраницаПолейГруппировки.Видимость 		= РасширеннаяНастройка;
	Элементы.СтраницаПользовательскихПолей.Видимость 	= РасширеннаяНастройка;
	Элементы.СтраницаУсловногоОформления.Видимость 		= РасширеннаяНастройка;
	Элементы.СтраницаПараметровВывода.Видимость 		= РасширеннаяНастройка;
	
КонецПроцедуры // УстановитьВидимостьПанелиРасширеннойНастройки()

&НаКлиенте
Процедура УправлениеВидимостьюФормы()
	
	// устанавливаем нужную панель для отчета
	ЕстьПанель = (ВидПериода <> "БезВыбора" И ЗначениеЗаполнено(ВидПериода));
	Элементы.ПанельИнтервалов.Видимость = ЕстьПанель;
	Если ЕстьПанель Тогда
		Элементы.ПанельИнтервалов.ТекущаяСтраница = ?(ЗначениеЗаполнено(ВидПериода),Элементы[ВидПериода],Элементы.Оборот);
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюФормы()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////////// 
//			ФУНКЦИИ ПЕРИОДА

#Область РаботаСПериодами

#Область ОбработчикиПериодаОборота

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", ОтчетСсылка.НачалоПериода, ОтчетСсылка.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтаФорма);
	ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ВыборСтандартногоПериодаУпр", ПараметрыВыбора, Элементы.ВыборПериода,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтчетСсылка.НачалоПериода = РезультатВыбора.НачалоПериода;
	ОтчетСсылка.КонецПериода  = РезультатВыбора.КонецПериода;
	//Элементы.ДекорПериод.Заголовок = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода);
	ВыборПериод = Истина;

КонецПроцедуры

#Область Период_Стандарт

&НаКлиенте
Процедура ВыбратьПериодСтандарт(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", ОтчетСсылка.НачалоПериода, ОтчетСсылка.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершениеСтандарт", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершениеСтандарт(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОтчетСсылка, РезультатВыбора, "НачалоПериода,КонецПериода");
	МодифицированныРеквизитыОтчета = Истина;	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПериодаМесяц

///////////////////////////////////////////////////////////////////////////////////////////
//			ОБРАБОТКА ПЕРИОДА МЕСЯЦ

&НаКлиенте 
Процедура МесяцСтрокаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(МесяцСтрока) Тогда
		ОтчетСсылка.Период = НачалоМесяца(ДатаСеанса());		
	Иначе
		ДатаКакМесяцПодобратьДатуПоТексту(МесяцСтрока, ОтчетСсылка.Период);
	КонецЕсли;
	МесяцСтрока = ДатаКакМесяцПредставление(ОтчетСсылка.Период);
КонецПроцедуры // ПериодРегистрацииПриИзменении()

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОтчетСсылка.Период  <= '19000101' Тогда
		ОтчетСсылка.Период = НачалоМесяца(ДатаСеанса());
	КонецЕсли; 

	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", ОтчетСсылка.Период, "Месяц", Ложь),
		ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;		
	КонецЕсли;

	ОтчетСсылка.Период = ВыбранноеЗначение;
	МесяцСтрока = ДатаКакМесяцПредставление(ОтчетСсылка.Период);
КонецПроцедуры

&НаКлиенте 
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если ОтчетСсылка.Период <= '19000101' Тогда
		ОтчетСсылка.Период = НачалоМесяца(ДатаСеанса());		
	КонецЕсли;
	ОтчетСсылка.Период = ДобавитьМесяц(ОтчетСсылка.Период, Направление);
	МесяцСтрока = ДатаКакМесяцПредставление(ОтчетСсылка.Период);
КонецПроцедуры // ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура МесяцСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОтчетСсылка.Период = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#Область ПроцедурыДляОбеспеченияВыводаМесяца

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой". ОМ.ЗарплатаКадрыКлиент - перенесено, чтоб не зависеть от ОМ

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте 
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
	МодифицированныРеквизитыОтчета = Истина;	
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

#КонецОбласти 
	
#КонецОбласти 

#Область ОбработчикиПериодаКвартал

///////////////////////////////////////////////////////////////////////////////////////////
//			ОБРАБОТКА ПЕРИОДА КВАРТАЛ

&НаКлиенте 
Процедура ПериодРегистрацииКвПриИзменении(Элемент)
	КварталСтрока = Элементы.КварталСтрока.СписокВыбора.НайтиПоЗначению(ОтчетСсылка.Период);
	КварталСтрока = ДатаКакКварталПредставление(ОтчетСсылка.Период);
КонецПроцедуры // ПериодРегистрацииПриИзменении()

&НаКлиенте 
Процедура ПериодРегистрацииКвРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОтчетСсылка.Период = НачалоКвартала(ДобавитьМесяц(ОтчетСсылка.Период, Направление*3));
	КварталСтрока = ДатаКакКварталПредставление(ОтчетСсылка.Период);
КонецПроцедуры // ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура КварталСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, ОтчетСсылка.Период, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, ОтчетСсылка.Период, ЭтаФорма);	
	//ДатаКакКварталАвтоПодборТекста(Текст, ПараметрыПолученияДанных.СтрокаПоиска, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДатаКакКварталОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте 
Процедура ПериодРегистрацииКвОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

#Область ПроцедурДляОбеспеченияВыводаКвартал

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
&НаКлиенте 
Функция ДатаКакКварталПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) Экспорт
	СписокВозврата = Новый СписокЗначений;
	Если ПустаяСтрока(Текст) Тогда
	    Возврат СписокВозврата;
	КонецЕсли;

	ТекущийГод = Год(ДатаСеанса());
	
	Если Найти(Текст, ".") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ".", Истина);
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ",", Истина);
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "-", Истина);
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "/", Истина);
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "\", Истина);
	Иначе
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, " ", Истина);
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
	    // единственное слово - это либо год, либо квартал
	    Если ТолькоЦифрыВСтроке(Текст) Тогда
	        КварталЧислом = Число(Текст);
	        Если КварталЧислом >= 1 и КварталЧислом <=4 Тогда
	            ДатаПоТексту = НачалоКвартала(Дата(ТекущийГод, КварталЧислом*3, 1));
                СписокВозврата.Добавить(ДатаКакКварталПредставление(ДатаПоТексту));
	        Иначе
	            Возврат СписокВозврата;
	        КонецЕсли;                
	    Иначе
	        СписокКварталов = СписокКварталовПоСтроке(Текст);
	        Для Каждого Квартал Из СписокКварталов Цикл
	            ДатаПоТексту = НачалоКвартала(Дата(ТекущийГод, Квартал*3, 1));
	            СписокВозврата.Добавить(ДатаКакКварталПредставление(ДатаПоТексту));
	        КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
	    // два слова - первое считаем месяцем, второе - годом
	    Если ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
	        Если ПустаяСтрока(Подстроки[1]) Тогда
	            ГодЧислом = 0;
	            Подстроки[1] = "0";
	            ТекстВозврата = Текст + "0";
	        Иначе
	            ГодЧислом = Число(Подстроки[1]);
	            ТекстВозврата = "";
	        КонецЕсли;
	        Если ГодЧислом > 3000 Тогда
	            Возврат СписокВозврата;
	        КонецЕсли;
	        Если СтрДлина(Подстроки[1]) <= 1 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
	            СтрокаФорматированияГода = "г";
	        ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
	            СтрокаФорматированияГода = "гг";
	        ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
	            СтрокаФорматированияГода = "гггг";
	        КонецЕсли;                    
	    Иначе
	        // второе слово может быть только годом
	        Возврат СписокВозврата;
		КонецЕсли;
		
	    Если ЗначениеЗаполнено(Подстроки[0]) И ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
	        МесяцЧислом = Число(Подстроки[0]);
	        Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
	            // если "правильный" месяц и год
	            ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
	            СписокВозврата.Добавить(ТекстВозврата);
	        Иначе
	            Возврат СписокВозврата;
	        КонецЕсли;                
	    Иначе
	        СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
	        Если СписокМесяцев.Количество() = 1 Тогда
	            ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
	            СписокВозврата.Добавить("");
	        Иначе
	            Для Каждого Месяц Из СписокМесяцев Цикл
	                ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
	                СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
	            КонецЦикла;
	        КонецЕсли;
	    КонецЕсли;
	КонецЕсли; 

	Возврат СписокВозврата;
	
КонецФункции

// подбирает массив номеров кварталов, соответствующих переданной строке
// используется в ПодобратьДатуПоТексту
//
&НаКлиенте 
Функция СписокКварталовПоСтроке(Текст)
	
	СписокКварталов = Новый СписокЗначений;
	Кварталы = Новый Соответствие;
	КварталыВозврата = Новый Массив;
		
	//Для Счетчик = 1 По 4 Цикл
	//	Представление = КварталРимскими(Счетчик) + " квартал " + Формат(, "ДФ='гггг ""г.""'");
	//	СписокКварталов.Добавить(Счетчик, Представление);
	//КонецЦикла;
	//
	//Для Каждого ЭлементСписка Из СписокКварталов Цикл
	//	Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
	//		Кварталы[ЭлементСписка.Значение] = 0;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Элемент Из Кварталы Цикл
	//	КварталыВозврата.Добавить(Элемент.Ключ);
	//КонецЦикла;
	//
	Возврат КварталыВозврата;
	
КонецФункции

&НаКлиенте 
Процедура ДатаКакКварталАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	//Список = ДатаКакКварталПодобратьДатуПоТексту(Текст);
	//Если Список.Количество() = 0 Тогда
	//	Возврат;
	//ИначеЕсли Список.Количество() = 1 Тогда
	//    ТекстАвтоПодбора = Список[0];
	//КонецЕсли;
	//СтандартнаяОбработка = Ложь;			
КонецПроцедуры

&НаКлиенте 
Процедура ДатаКакКварталОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
	//Список = ДатаКакКварталПодобратьДатуПоТексту(Текст);
	//Если Список.Количество() = 1 Тогда
	//    Значение = Текст;
	//Иначе
	//    Значение = Список;
	//КонецЕсли;
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	Элементы.КварталСтрока.СписокВыбора.Очистить();
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоКварталаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 4 Цикл
		НачалоКварталаЗаполнения = НачалоКвартала(ДобавитьМесяц(НачалоТекущегоГода, а*3-1));
		ДобавленныйЭлемент = Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоКварталаЗаполнения, ДатаКакКварталПредставление(НачалоКварталаЗаполнения));
		Если НачальноеЗначение = НачалоКварталаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
		
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОтчетСсылка.Период = ВыбранноеЗначение;
КонецПроцедуры


&НаКлиенте 
Функция ДатаКакКварталПредставление(ДатаДата) Экспорт
	МодифицированныРеквизитыОтчета = Истина;	
	НомерКвартала = Число(Формат(ДатаДата, "ДФ=к"));
	Возврат КварталРимскими(НомерКвартала) + " квартал " + Формат(ДатаДата, "ДФ='гггг ""г.""'");
КонецФункции

Функция КварталРимскими(НомерКвартала)
    Если НомерКвартала = 1 Тогда
		Возврат "I";
	ИначеЕсли НомерКвартала = 2 Тогда 
		Возврат "II";
	ИначеЕсли НомерКвартала = 3 Тогда 
		Возврат "III";
	ИначеЕсли НомерКвартала = 4 Тогда 
		Возврат "IV";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // КварталРимскими()

#КонецОбласти 
	
#КонецОбласти 

#Область ВспомогательныеДляРасчетовТектовыхПериодов

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
&НаКлиенте 
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				МассивСтрок.Добавить("");
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			МассивСтрок.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		МассивСтрок.Добавить(Строка);
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте 
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции
	
#КонецОбласти

#Область ОбщиеОбработчикиПериода

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	ИзменитьПериод(-1);
	МесяцСтрока = ДатаКакМесяцПредставление(ОтчетСсылка.Период);	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	ИзменитьПериод(1);
	МесяцСтрока = ДатаКакМесяцПредставление(ОтчетСсылка.Период);	
КонецПроцедуры

&НаСервере 
Процедура ИзменитьПериод(ЧислоМесяцев)
	
	Если Элементы.ПанельИнтервалов.ТекущаяСтраница = Элементы.Квартал Тогда
		ОтчетСсылка.НачалоПериода = НачалоКвартала(ДобавитьМесяц(ОтчетСсылка.НачалоПериода,ЧислоМесяцев));
		ОтчетСсылка.КонецПериода 	= КонецКвартала(ДобавитьМесяц(ОтчетСсылка.КонецПериода,ЧислоМесяцев));
	ИначеЕсли Элементы.ПанельИнтервалов.ТекущаяСтраница = Элементы.Месяц Тогда
		ОтчетСсылка.Период = НачалоМесяца(ДобавитьМесяц(ОтчетСсылка.Период, ЧислоМесяцев*12));
	Иначе
		ОтчетСсылка.НачалоПериода = НачалоМесяца(ДобавитьМесяц(ОтчетСсылка.НачалоПериода,ЧислоМесяцев));
		ОтчетСсылка.КонецПериода 	= КонецМесяца(ДобавитьМесяц(ОтчетСсылка.КонецПериода,ЧислоМесяцев));
	КонецЕсли;
	
	МодифицированныРеквизитыОтчета = Истина;	
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ДатаСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции // ДатаСеанса

#КонецОбласти 
