
/////////////////////////////////////////////////////////////////////////////////////////// 
//			ОБРАБОТЧИКИ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "АдресСхемыСКД,АдресРасшифровкиСКД");
	Если Параметры.Свойство("СтандартнаяРасшифровка") И Параметры.СтандартнаяРасшифровка = Истина Тогда
		// это вызов формы с действия Расшифровать...
		ОбработкаСтандартнойРасшифровки(Параметры.Расшифровка);
		
	Иначе
		// это вызов нестандартной расшифровки отчета
		ИндексВариантаРасшифровки = ?(Параметры.Свойство("ИндексВариантаРасшифровки"), Параметры.ИндексВариантаРасшифровки, 0);
		ВнешниеДанные = ?(Параметры.Свойство("ВнешниеДанные"), Параметры.ВнешниеДанные, Неопределено);
		СтруктураПараметров = ?(Параметры.Свойство("СтруктураПараметров"), Параметры.СтруктураПараметров, Неопределено);
		СформироватьОтчетПроизвольнойРасшифровки(Параметры.СтруктураРасшифровки, СтруктураПараметров, ВнешниеДанные);
	КонецЕсли; 
	
	Элементы.Результат.Доступность = Истина;	
	ЭтаФорма.Заголовок = ?(ЗначениеЗаполнено(ПредставлениеРасшифровки) И ПредставлениеРасшифровки <> "Детализация отчета", "Детализация отчета: " + СокрЛП(ПредставлениеРасшифровки), "Детализация отчета");
	
	Результат.ПоказатьУровеньГруппировокСтрок(?(Параметры.Свойство("УровеньГруппировки"), Параметры.УровеньГруппировки, 0));
	
	// Вызов процедуры генерации кнопок управления группировкой
	Если Результат.КоличествоУровнейГруппировокСтрок() > 1 Тогда
		СгенерироватьКнопкиУправленияГруппировкой();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОчиститьСообщения();
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Текст = "";
	ОтображениеСостояния.Видимость = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьКак(Команда)
	ОбработатьНачалоВыбораФайла(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(РежимВыгрузки = Истина)
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаЗавершение", ЭтаФорма, Новый Структура("РежимВыгрузки", РежимВыгрузки)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РежимВыгрузки = ДополнительныеПараметры.РежимВыгрузки;
	
	Если Не Подключено Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗавершениеУстановкиРасширения", ЭтаФорма);		
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
	ПредставлениеСохраняемогоФайла = УдалитьЗапрещенныеСимволыИмени(СокрЛП(ПредставлениеРасшифровки));
	
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;	
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Сохранение отчета в файл'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ПредставлениеСохраняемогоФайла;
	
	ДиалогВыбораФайла.Фильтр = "Документ MS Excel (*.xls)|*.xls|Документ MS Excel 2007 (*.xlsx)|*.xlsx|Документ формата PDF (*.pdf)|*.pdf";
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаЗавершениеДиалога", ЭтаФорма, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаЗавершениеДиалога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
		ТипФайла = ТипФайлаПоРасширению(ПутьКФайлу);
		
		Состояние(Нстр("ru = 'Пожалуйста, подождите...'"));
		
		АдресФайлаВоВременномХранилище = "";
		ТекстСообщения = ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, ТипФайла);
		
		Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
			ПолучитьФайл(АдресФайлаВоВременномХранилище, ПутьКФайлу, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения, 5, "Ошибка сохранения файла");
		КонецЕсли; 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, ТипФайла)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		Результат.Записать(ИмяВременногоФайла, ТипФайла);
	Исключение КонецПопытки;		
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат "";
	Иначе
		Возврат "Ошибка при записи. Файл не записан!";
	КонецЕсли;
КонецФункции

//-------------------------------------------------------

&НаКлиенте 
// Процедура - обработчик нажатия кнопки "ОтображатьЗаголовки"
Процедура ОтображатьЗаголовки(Кнопка)
	Элементы.ОтображатьЗаголовки.Пометка = НЕ Элементы.Результат.ОтображатьЗаголовки;
	Элементы.Результат.ОтображатьЗаголовки = НЕ Элементы.Результат.ОтображатьЗаголовки;
КонецПроцедуры

&НаКлиенте
// Вызывется при нажатии кнопочек "1", "2" и т.д. (для сворачивания группировок)
Процедура СвернутьДоУровня(Команда)

	Попытка
		Уровень = Число(Сред(Команда.Имя,6)); // здесь записан нужный уровень
	Исключение
		Уровень = 1;
	КонецПопытки; 
	Результат.ПоказатьУровеньГруппировокСтрок(Уровень - 1);

КонецПроцедуры //СвернутьДоУровня()

#КонецОбласти 

/////////////////////////////////////////////////////////////////////////////////////////// 
//	РАБОТА С ТАБЛИЧНЫМ ПОЛЕМ ОТЧЕТА

#Область ПоляТаблицыРезультата

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	СуммаЯчеек = ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Перем ДоступныеДействия;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПунктыМеню = Новый СписокЗначений;
	ДополнительныеПараметры = Новый Структура;	
	ИспользоватьОсновДействие = Истина;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ДополнительныеПунктыМеню = Новый СписокЗначений;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(мДанныеРасшифровкиОтчета, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыСКД));
	ОбработкаРасшифровки.ПоказатьВыборДействия(
							Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиЗавершение", ЭтаФорма, ДополнительныеПараметры), 
							Расшифровка, ДоступныеДействия, ДополнительныеПунктыМеню, ИспользоватьОсновДействие, );		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ВыполненноеДействие,ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

/////////////////////////////////////////////////////////////////////////////////////////// 

#Область Вспомогательные

&НаСервере   
// Генерирует кнопки управления группировкой
Процедура СгенерироватьКнопкиУправленияГруппировкой()
	
	// находим подменю вариантов отчета
	КоманднаяПанельДействий = Элементы.Найти("ГруппаКнопокУровней");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ПрефиксИмениКн = "КнГр_";
	
	Инд = 1;
	Пока Истина Цикл
		КнопкаУровня = Элементы.Найти(ПрефиксИмениКн + Инд);
		Если КнопкаУровня = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Элементы.Удалить(КнопкаУровня);
		Команды.Удалить(Команды.Найти(ПрефиксИмениКн + Инд));
		Инд = Инд + 1;
	КонецЦикла; 
	
    // Добавить новые кнопки по количеству группировок
    КоличествоГруппировок = Результат.КоличествоУровнейГруппировокСтрок();
	Для Сч = 1 По КоличествоГруппировок Цикл
		НоваяКоманда = Команды.Добавить(ПрефиксИмениКн + Сч);
		НоваяКоманда.Действие = "СвернутьДоУровня";
		
		НоваяКнопка = Элементы.Добавить(ПрефиксИмениКн + Сч, Тип("КнопкаФормы"), Элементы.ГруппаКнопокУровней);
    	НоваяКнопка.Шрифт     = Новый Шрифт("Шрифт диалогов и меню",,7,,Истина);
    	НоваяКнопка.Заголовок = "<Уровень-" + Сч + ">";
		НоваяКнопка.ИмяКоманды = ПрефиксИмениКн + Сч;
    КонецЦикла;
	
КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

&НаКлиенте
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	ВычисляемаяСумма = 0; КоличествоЯчеек = 0;
	ТекущийТабличныйДокумент = ЭтотОбъект[ПолеТабличногоДокумента.Имя];
	
	Для Каждого Область Из ТекущийТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						ВычисляемаяСумма = ВычисляемаяСумма + Число(СтрЗаменить(ТекущийТабличныйДокумент.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
						КоличествоЯчеек = КоличествоЯчеек + 1;
						Если КоличествоЯчеек > 100 Тогда
							Прервать;
						КонецЕсли; 
					Исключение
					КонецПопытки;
				КонецЦикла;
				Если КоличествоЯчеек > 100 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если КоличествоЯчеек > 100 Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	КолЯчеек = "";
	Если КоличествоЯчеек > 100 Тогда
		КолЯчеек = "(ячеек > 100)";
	Иначе 
		КолЯчеек = ?(КоличествоЯчеек > 0, "  (в " + Формат(КоличествоЯчеек, "ЧЦ=3; ЧДЦ=0; ЧГ=0") + ?(КоличествоЯчеек = 1, " поле)"," полях)"), "");
	КонецЕсли;		
		
	Возврат ?(КоличествоЯчеек > 100, "__.__", Формат(ВычисляемаяСумма, "ЧГ=3,0; ЧН=0.00")) + КолЯчеек;

КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	СписокСимволов.Добавить(".");
	
	Возврат СписокСимволов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда 		
		Возврат ИтоговоеИмяФайла;         		
	КонецЕсли;                 	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл  		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");		
	КонецЦикла;
	
	Возврат СокрЛП(ИтоговоеИмяФайла);

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

&НаКлиентеНаСервереБезКонтекста 
Функция ТипФайлаПоРасширению(Знач ИмяФайла) Экспорт
	Расширение = СокрЛП(ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, "."));
	Попытка
		ТипФайла = ТипФайлаТабличногоДокумента[Расширение];
	Исключение
		ТипФайла = ТипФайлаТабличногоДокумента.XLS;
	КонецПопытки; 
	Возврат ТипФайла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
		КонецЕсли;
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодаПоСтруктуреПараметров(СтруктураПараметров)
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		Возврат "";
	ИначеЕсли СтруктураПараметров.Свойство("НачалоПериода") И СтруктураПараметров.Свойство("КонецПериода") Тогда
		Возврат " за " + ПредставлениеПериода(НачалоДня(СтруктураПараметров.НачалоПериода), КонецДня(СтруктураПараметров.КонецПериода), "ФП = Истина");
	ИначеЕсли СтруктураПараметров.Свойство("Период") Тогда
		Возврат " на " + Формат(СтруктураПараметров.Период, "ДФ='dd.MM.yyyy ""г.""'");
	ИначеЕсли СтруктураПараметров.Свойство("НачалоПериода") Тогда
		Возврат " с " + Формат(СтруктураПараметров.НачалоПериода, "ДФ='dd.MM.yyyy ""г.""'");
	ИначеЕсли СтруктураПараметров.Свойство("КонецПериода") Тогда
		Возврат " по " + Формат(СтруктураПараметров.КонецПериода, "ДФ='dd.MM.yyyy ""г.""'");
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции // ПредставлениеПериодаПоСтруктуреПараметров
 
#КонецОбласти 

#Область ОбработкаРасшифровокОтчета

&НаСервере
Процедура ОбработкаСтандартнойРасшифровки(ОписаниеОбработкиРасшифровки)
	
	Результат.Очистить();
	
	СхемаСКДРасшифровки = ПолучитьИзВременногоХранилища(АдресСхемыСКД);
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(АдресРасшифровкиСКД);
	ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект,   Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	// определяем расшифровку
	ДанныеРасшифровкиОтчета = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКДРасшифровки, Отчет.КомпоновщикНастроек.Настройки, ДанныеРасшифровкиОтчета,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиОтчета, Истина);
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
    мДанныеРасшифровкиОтчета = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОтчета, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаСервере 
Функция СформироватьОтчетПроизвольнойРасшифровки(СтруктураРасшифровки, СтруктураПараметров = Неопределено, ВнешниеДанные = Неопределено) Экспорт
	
	Результат.Очистить();
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаСКДРасшифровки = ПолучитьИзВременногоХранилища(АдресСхемыСКД);
	ВариантОтчетаРасшифровки = СхемаСКДРасшифровки.ВариантыНастроек[ИндексВариантаРасшифровки];			
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКДРасшифровки));
	Отчет.КомпоновщикНастроек.Восстановить();
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчетаРасшифровки.Настройки);	
	
	ОтчетОбъект.ПримененияПараметровСКД(СтруктураПараметров);
	// вставляем отборы, переданные в структуре
	Для каждого элОтбор Из СтруктураРасшифровки Цикл
		ОтчетОбъект.НастройкаОтбораИзДанныхОсновнойформы(элОтбор.Ключ, ВидСравненияКомпоновкиДанных.Равно, элОтбор.Значение, ЗначениеЗаполнено(элОтбор.Значение));
	КонецЦикла; 
	
	ПериодТекст = ПредставлениеПериодаПоСтруктуреПараметров(СтруктураПараметров);
	Титл = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title");
	ПредставлениеРасшифровки = Титл.Значение;
	ПредставлениеРасшифровки = ?(ЗначениеЗаполнено(ПредставлениеРасшифровки), СокрЛП(ПредставлениеРасшифровки), "Детализация отчета");	
	Титл.Значение = ПредставлениеРасшифровки + Символы.ПС + ПериодТекст;
	
	//ВнешниеНаборыДанных = Новый Структура;
	//ВнешниеНаборыДанных.Вставить("РасшифровкаДанных", ВнешниеДанные);	
	
	// определяем расшифровку
	ДанныеРасшифровкиОтчета = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСКДРасшифровки, Отчет.КомпоновщикНастроек.Настройки, ДанныеРасшифровкиОтчета,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ТипЗнч(ВнешниеДанные) = Тип("Структура") Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровкиОтчета, Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиОтчета, Истина);
	КонецЕсли; 
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
    мДанныеРасшифровкиОтчета = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОтчета, Новый УникальныйИдентификатор);	
	
КонецФункции
	
#КонецОбласти 
