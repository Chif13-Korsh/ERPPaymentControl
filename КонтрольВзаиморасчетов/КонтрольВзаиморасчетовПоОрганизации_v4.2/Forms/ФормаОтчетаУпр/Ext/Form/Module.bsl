
#Область ОписаниеПеременных

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РД = ТекущаяДатаСеанса();
	Отчет.НачалоПериода = НачалоМесяца(РД);
	Отчет.КонецПериода = КонецМесяца(РД);
	Отчет.Период = КонецМесяца(РД);
	СуммаЯчеек = "0.00";
	
	НастройкиОтчета = СоздатьНастройкиОтчета();
	
	// устанавливаем вариант отчета
	НастройкиОтчета.ИндексВариантаОтчета = 0;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	НастройкиОтчета.ГлУзелВариантовОтчета = ОтчетОбъект.ПроверитьГлУзелСохраненныхВариантовОтчета();
	ОтчетОбъект.НачальноеЗаполнениеОтчета(НастройкиОтчета);
	ОтчетОбъект.СформироватьСписокВариантовОтчета(,Отчет.ВариантыОтчетов);
	СформироватьПодменюВариантовОтчета();
	ОтчетОбъект.СформироватьСписокСохраненныхНастроекПользователя(НастройкиОтчета);
	
	Попытка
		Версия = ОтчетОбъект.СведенияОВнешнейОбработке().Версия;
	Исключение КонецПопытки;
	
	Если Отчет.ВариантыОтчетов.Количество() > 0 Тогда
		НастройкиОтчета.ИмяВариантаОтчета = Отчет.ВариантыОтчетов[0].ИмяВарианта;
		ОтчетОбъект.УстановитьУказанныйВариантСКД(НастройкиОтчета);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	НастройкиОтчета.СхемаМодифицирована = Истина;
	СформироватьБыстрыйДоступКНастройкамПользователя();
	
	//УстановитьВидимостьПанелиБыстрогоОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостью(); 
	ВидКонтрагентовКРПриИзменении(Элементы.ВидКонтрагентовКР);
	ОтобразитьСостояниеОтчета("Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура СформироватьНаСервере()
	
	ТочкаСтарт = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПроверкаЗаполненияПередВыполнением();
	Элементы.Результат.Доступность = Истина;
	
	Если Элементы.ПанельИнтервалов.ТекущаяСтраница.Имя = "Месяц" Тогда
		Отчет.НачалоПериода = НачалоМесяца(Отчет.Период);
		Отчет.КонецПериода  = КонецМесяца(Отчет.Период);
	КонецЕсли;
	
	НастройкиОтчета.Вставить("Клиенты", ВидКонтрагентовКР = 1); 
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.СформироватьОтчет(Результат, НастройкиОтчета);
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет"); 
	
	Если НастройкиОтчета.ИмяТекущейСхемыСКД = "ПроверкаСуммПроводокИРегистров" Тогда
		ДоУровня = 2;
	Иначе
		ДоУровня = 3;
	КонецЕсли;
	
	КолВоУровней = Результат.КоличествоУровнейГруппировокСтрок();
	Пока КолВоУровней >= ДоУровня Цикл
		Результат.ПоказатьУровеньГруппировокСтрок(КолВоУровней);
		КолВоУровней = КолВоУровней - 1;
	КонецЦикла;
	
	// Вызов процедуры генерации кнопок управления группировкой
	Если Результат.КоличествоУровнейГруппировокСтрок() > 1 Тогда
		СгенерироватьКнопкиУправленияГруппировкой();
	КонецЕсли;
	
	ТочкаФиниш = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяФормирования = ТочкаФиниш - ТочкаСтарт;
	Элементы.НадписьВремяФормирования.Заголовок = "Время формирования отчета: " + ПолучитьПредставлениеВремени(ВремяФормирования) + " мс";
	
	НастройкиОтчета.СхемаМодифицирована = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ОчиститьСообщения();
	ОтобразитьСостояниеОтчета("");	
	СформироватьНаСервере();
	ОтобразитьСостояниеОтчета("");	
КонецПроцедуры

//-------------------------------------------------------

&НаКлиенте
Процедура СохранитьКак(Команда)
	ОбработатьНачалоВыбораФайла(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(РежимВыгрузки = Истина)
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаЗавершение", ЭтаФорма, Новый Структура("РежимВыгрузки", РежимВыгрузки)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РежимВыгрузки = ДополнительныеПараметры.РежимВыгрузки;
	
	Если Не Подключено Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗавершениеУстановкиРасширения", ЭтаФорма);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
	ПредставлениеСохраняемогоФайла = УдалитьЗапрещенныеСимволыИмени(СокрЛП(НастройкиОтчета.ПредставлениеВарианта) 
	+ ?(Элементы.ПанельИнтервалов.ТекущаяСтраница = Элементы.Остатки, 
			Формат(Отчет.Период, "ДФ=yyyy-MM-dd"), 
			ПолучитьПредставлениеПериода(Отчет.НачалоПериода,Отчет.КонецПериод)
		)
	);
	
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Сохранение отчета в файл'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ПредставлениеСохраняемогоФайла;
	
	ДиалогВыбораФайла.Фильтр = "Документ MS Excel (*.xls)|*.xls|Документ MS Excel 2007 (*.xlsx)|*.xlsx|Документ формата PDF (*.pdf)|*.pdf";
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработатьНачалоВыбораФайлаЗавершениеДиалога", ЭтаФорма, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайлаЗавершениеДиалога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
		ТипФайла = ТипФайлаПоРасширению(ПутьКФайлу);
		
		Состояние(Нстр("ru = 'Пожалуйста, подождите...'"));
		
		АдресФайлаВоВременномХранилище = "";
		ТекстСообщения = ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, ТипФайла);
		
		Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
			ПолучитьФайл(АдресФайлаВоВременномХранилище, ПутьКФайлу, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения, 5, "Ошибка сохранения файла");
		КонецЕсли; 		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, ТипФайла)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		Результат.Записать(ИмяВременногоФайла, ТипФайла);
	Исключение КонецПопытки;		
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат "";
	Иначе
		Возврат "Ошибка при записи. Файл не записан!";
	КонецЕсли;
КонецФункции

//-------------------------------------------------------

&НаКлиенте
Процедура СКДНастройки(Команда)
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("Отчет", 			ПолучитьСтруктуруДанныхОтчета());		
	ДополнительныеНастройки.Вставить("ВидПериода",		Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].Слой);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].ИмяВарианта));
	ПараметрыФормы.Вставить("Вариант",                   Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",     		 НастройкиОтчета);
	ПараметрыФормы.Вставить("Дополнительно",     		 ДополнительныеНастройки);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОповещениеЗакрытияНастроек = Новый ОписаниеОповещения("ОбработкаЗакрытияНастроекФормы", ЭтотОбъект);
	
	ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ФормаНастроекУпр",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор,,, ОповещениеЗакрытияНастроек, Режим);	//.ФормаНастроек
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияНастроекФормы(РезультатВыбора, ДопПараметры) Экспорт
	Если РезультатВыбора = Неопределено ИЛИ НЕ ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора.Свойство("МодифицированныРеквизитыОтчета") И РезультатВыбора.МодифицированныРеквизитыОтчета Тогда
		ЗагрузитьНовыеНастройкиОтчета(РезультатВыбора.Отчет);
	КонецЕсли;
	
	Если РезультатВыбора.Свойство("НастройкиКД") Тогда
		Если ТипЗнч(РезультатВыбора.НастройкиКД) = Тип("НастройкиКомпоновкиДанных") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультатВыбора.НастройкиКД);
			НастройкиОтчета.СхемаМодифицирована = Истина;
			НастройкиОтчета.АдресНастроекКомпановщика = ПоместитьВоВременноеХранилище(РезультатВыбора.НастройкиКД, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли; 
	
	// для периода месяц
	МесяцСтрока = ДатаКакМесяцПредставление(Отчет.Период);
	// для периода квартал
	КварталСтрока = ДатаКакКварталПредставление(Отчет.Период);
	
	УправлениеВидимостью();
	ОтобразитьСостояниеОтчета("Сменились настройки отчета! Необходимо переформировать отчет.");
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНовыеНастройкиОтчета(СтруктураНастроек)
	Для каждого ЭлементОтчета Из СтруктураНастроек Цикл
		Если ТипЗнч(ЭлементОтчета.Значение) = Тип("ДанныеФормыКоллекция") Тогда
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ЭлементОтчета.Значение.Выгрузить();
			Отчет[ЭлементОтчета.Ключ].Загрузить(ТЗ);
		Иначе 
			Отчет[ЭлементОтчета.Ключ] = ЭлементОтчета.Значение;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // ЗагрузитьНовыеНастройкиОтчета()

//-------------------------------------------------------

&НаСервере 
Процедура УстановитьВариантСхемыСервер(ИмяВарианта)
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");	
	НастройкиОтчета.ИмяВариантаОтчета = ИмяВарианта; 
	
	НастройкиОтчета.Вставить("Клиенты", ВидКонтрагентовКР = 1);	
	
	ОтчетОбъект.УстановитьУказанныйВариантСКД(НастройкиОтчета);
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	
	СформироватьБыстрыйДоступКНастройкамПользователя();
	НастройкиОтчета.СохраненныйВариант = ПредопределенноеЗначение("Справочник.ВариантыОтчетов.ПустаяСсылка");
	
КонецПроцедуры	// УстановитьВариантСхемыСервер

&НаКлиенте
Процедура УстановитьВариантСхемы(Команда)
	
	УстановитьВариантСхемыСервер(Команда.Имя);
	
	// устанавливаем пометку на выбранную кнопку
	Для каждого ГруппаКоллекции Из Элементы.ВариантыОтчета.ПодчиненныеЭлементы Цикл
		Для каждого КнопкаГруппы Из ГруппаКоллекции.ПодчиненныеЭлементы Цикл
			КнопкаГруппы.Пометка = Ложь;
		КонецЦикла; 
	КонецЦикла; 
	Элементы[Команда.Имя].Пометка = Истина;
	
	НастройкиОтчета.СхемаМодифицирована = Истина;
	НастройкиОтчета.СохраненныйВариант = ПредопределенноеЗначение("Справочник.ВариантыОтчетов.ПустаяСсылка");
	НастройкиОтчета.НастройкиОтбора	= Новый Структура;	
	
	УправлениеВидимостью();
	ОтобразитьСостояниеОтчета("Сменился вариант отчета! Необходимо переформировать отчет.");	
	
КонецПроцедуры

//-------------------------------------------------------

&НаКлиенте 
// Процедура - обработчик нажатия кнопки "ОтображатьЗаголовки"
Процедура ОтображатьЗаголовки(Кнопка)
	Элементы.ОтображатьЗаголовки.Пометка = НЕ Элементы.Результат.ОтображатьЗаголовки;
	Элементы.Результат.ОтображатьЗаголовки = НЕ Элементы.Результат.ОтображатьЗаголовки;
КонецПроцедуры

&НаКлиенте
// Вызывется при нажатии кнопочек "1", "2" и т.д. (для сворачивания группировок)
Процедура СвернутьДоУровня(Команда)

	Попытка
		Уровень = Число(Сред(Команда.Имя,6)); // здесь записан нужный уровень
	Исключение
		Уровень = 1;
	КонецПопытки; 
	Результат.ПоказатьУровеньГруппировокСтрок(Уровень - 1);

КонецПроцедуры //СвернутьДоУровня()

//-------------------------------------------------------

&НаКлиенте
Процедура СохранитьНастройкуОтчета(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета",	НастройкиОтчета);
	ПараметрыФормы.Вставить("КлючВарианта",		Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].ИмяСхемы + "." + Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].ИмяВарианта);
	ПараметрыФормы.Вставить("ИмяОтчета",		НастройкиОтчета.ИмяВнешнейОбработки);
	ПараметрыФормы.Вставить("ТекущийВариант",	НастройкиОтчета.СохраненныйВариант);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;	
	ОповещениеСохранениеНастроек = Новый ОписаниеОповещения("ОбработкаСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ФормаСохраненияНастройкиУпр",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор,,, ОповещениеСохранениеНастроек, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСохранениеНастроек(РезультатВыбора, ДопПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета.СохраненныйВариант = РезультатВыбора;
	СохранитьНастройкуСервер(РезультатВыбора);
		
КонецПроцедуры // ОбработкаЗакрытияНастроекФормы()

&НаСервере
Процедура СохранитьНастройкуСервер(ВыбраннаяНастройка)
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");	
	ОтчетОбъект.СформироватьСписокСохраненныхНастроекПользователя(НастройкиОтчета);
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	
	СформироватьБыстрыйДоступКНастройкамПользователя();
	Если ВыбраннаяНастройка.Пользовательский Тогда
		// устанавливаем пометку, что используется именно эта настройка уже
		УстановитьПометкуИспользованияНастройки(ВыбраннаяНастройка);
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = ВыбраннаяНастройка.Наименование;
КонецПроцедуры	// СохранитьНастройуСервер
 
//-------------------------------------------------------
 
&НаКлиенте
Процедура ОткрытьСписокНастроек(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета",		НастройкиОтчета);
	ПараметрыФормы.Вставить("СохраненныеНастройки", Отчет.СохраненныеНастройкиПользователей);
	ПараметрыФормы.Вставить("ИмяВнешнейОбработки", 	НастройкиОтчета.ИмяВнешнейОбработки);
	ПараметрыФормы.Вставить("КлючВарианта",			Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].ИмяСхемы + "." + Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].ИмяВарианта);	
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОповещениеОткрытиеСписка = Новый ОписаниеОповещения("ОбработкаСписокНастроекЗакрытие", ЭтотОбъект);
	ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ФормаВыбораНастроекПользователяУпр",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор,,, ОповещениеОткрытиеСписка, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСписокНастроекЗакрытие(РезультатВыбора, ДопПараметры) Экспорт
	Если РезультатВыбора = Неопределено ИЛИ НЕ ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора.Свойство("ПереформироватьСписок") И РезультатВыбора.ПереформироватьСписок = Истина Тогда
		СформироватиьСписокНастроекПользователяСервер();
		СформироватьБыстрыйДоступКНастройкамПользователя();
	КонецЕсли; 
	
	Если НЕ РезультатВыбора.Свойство("Настройка") Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьНастройкуПользователяСервер(РезультатВыбора.Настройка);
	
	// устанавливаем пометку на выбранную кнопку
	Для каждого КнопкаГруппы Из Элементы.ГруппаЧастоИспользуемыеНастройки.ПодчиненныеЭлементы Цикл
		КнопкаГруппы.Пометка = Ложь;
	КонецЦикла; 
	
	// переформируем список настроек пользователя, если надо
	Если РезультатВыбора.ПереформироватьСписок = Истина Тогда
		СформироватиьСписокНастроекПользователяСервер();
	КонецЕсли; 
	
	Найденные = Отчет.СохраненныеНастройкиПользователей.НайтиСтроки(Новый Структура("Настройка", РезультатВыбора.Настройка));
	Если Найденные.Количество() <> 0 И ЗначениеЗаполнено(Найденные[0].ИмяКоманды) Тогда
		Элементы[Найденные[0].ИмяКоманды].Пометка = Истина;
	КонецЕсли; 
	
	НастройкиОтчета.СхемаМодифицирована = Истина;	
	УправлениеВидимостью();
	ОтобразитьСостояниеОтчета("Установлены выбранные настройки пользователя! Необходимо переформировать отчет.");		
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры // ОбработкаЗакрытияНастроекФормы()

&НаСервере
Процедура СформироватиьСписокНастроекПользователяСервер()
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.СформироватьСписокСохраненныхНастроекПользователя(НастройкиОтчета);
КонецПроцедуры // СформироватиьСписокНастроекПользователяСервер()


&НаСервере
Процедура УстановитьНастройкуПользователяСервер(ВариантПользователя)
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");	
	НастройкиОтчета.СохраненныйВариант = ВариантПользователя;
	
	ОтчетОбъект.УстановитьВыбраннуюНастройкуПользователя(НастройкиОтчета);

	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	
КонецПроцедуры	// УстановитьНастройкуПользователяСервер

&НаКлиенте
Процедура УстановитьНастройкуПользователя(Команда)
	ИмяКоманды = Команда.Имя;
	
	Найденные = Отчет.СохраненныеНастройкиПользователей.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВариантПользователя = Найденные[0].Настройка;
	УстановитьНастройкуПользователяСервер(ВариантПользователя);
	
	// устанавливаем пометку на выбранную кнопку
	Для каждого КнопкаГруппы Из Элементы.ГруппаЧастоИспользуемыеНастройки.ПодчиненныеЭлементы Цикл
		КнопкаГруппы.Пометка = Ложь;
	КонецЦикла; 
	Элементы[Команда.Имя].Пометка = Истина;
	
	НастройкиОтчета.СхемаМодифицирована = Истина;	
	УправлениеВидимостью();
	ОтобразитьСостояниеОтчета("Установлены выбранные настройки пользователя! Необходимо переформировать отчет.");	
	
КонецПроцедуры // УстановитьНастройкуПользователя()

//-------------------------------------------------------

&НаСервере
Процедура ИсправлениеОбъектов(ВидИсправления, ПараметрыИсправление)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	
	Если ВидИсправления = "НесовпадениеДанныхСОбъектом" Тогда
		ОбъектОтчет.ИсправлениеОбъектов_НесовпадениеДанныхСОбъектом(ПараметрыИсправление);
	ИначеЕсли ВидИсправления = "ПомеченныеНаУдаленияДоговора" Тогда
		ОбъектОтчет.ИсправлениеОбъектов_ПомеченныеНаУдаленияДоговора(ПараметрыИсправление);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не определена по данному исправлению операция!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИсправлениеОбъектов_НесовпадениеДанныхСОбъектом(Команда)
	
	Если НЕ (ЗначениеЗаполнено(Отчет.Организация) И ЗначениеЗаполнено(Отчет.Период)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнена Организация или Период для расчета.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПараметрыДляИсправления = Новый Структура("Организация, Период, Клиенты", 
		Отчет.Организация, КонецДня(Отчет.Период), ВидКонтрагентовКР = 1);
	ИсправлениеОбъектов("НесовпадениеДанныхСОбъектом", ПараметрыДляИсправления);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИсправлениеОбъектов_ПомеченныеНаУдаленияДоговора(Команда)
	
	Если НЕ (ЗначениеЗаполнено(Отчет.Организация) И ЗначениеЗаполнено(Отчет.Период)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнена Организация или Период для расчета.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПараметрыДляИсправления = Новый Структура("Организация, Период, Клиенты", 
		Отчет.Организация, КонецДня(Отчет.Период), ВидКонтрагентовКР = 1);
	ИсправлениеОбъектов("ПомеченныеНаУдаленияДоговора", ПараметрыДляИсправления);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

#Область РаботаСПериодами

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

#Область ОбработчикиПериодаОборота

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтаФорма);
	ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ВыборСтандартногоПериодаУпр", ПараметрыВыбора, Элементы.ВыборПериода,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отчет.НачалоПериода = РезультатВыбора.НачалоПериода;
	Отчет.КонецПериода 	= РезультатВыбора.КонецПериода;
	//Элементы.ДекорПериод.Заголовок = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода);
	ВыборПериод = Истина;
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");

КонецПроцедуры

#Область Период_Стандарт

&НаКлиенте
Процедура ВыбратьПериодСтандарт(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершениеСтандарт", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершениеСтандарт(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПериодаМесяц

///////////////////////////////////////////////////////////////////////////////////////////
//			ОБРАБОТКА ПЕРИОДА МЕСЯЦ

&НаКлиенте 
Процедура МесяцСтрокаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(МесяцСтрока) Тогда
		Отчет.Период = НачалоМесяца(ДатаСеанса());
	Иначе
		ДатаКакМесяцПодобратьДатуПоТексту(МесяцСтрока, Отчет.Период);
	КонецЕсли;
	МесяцСтрока = ДатаКакМесяцПредставление(Отчет.Период);
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Отчет.Период  <= '19000101' Тогда
		Отчет.Период = НачалоМесяца(ДатаСеанса());
	КонецЕсли; 

	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Отчет.Период, "Месяц", Ложь),
		ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;		
	КонецЕсли;

	Отчет.Период = ВыбранноеЗначение;
	МесяцСтрока = ДатаКакМесяцПредставление(Отчет.Период);
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");		
КонецПроцедуры

&НаКлиенте 
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Отчет.Период <= '19000101' Тогда
		Отчет.Период = НачалоМесяца(ДатаСеанса());		
	КонецЕсли;
	Отчет.Период = ДобавитьМесяц(Отчет.Период, Направление);
	МесяцСтрока = ДатаКакМесяцПредставление(Отчет.Период);
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");		
КонецПроцедуры // ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура МесяцСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Отчет.Период = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#Область ПроцедурыДляОбеспеченияВыводаМесяца

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой". ОМ.ЗарплатаКадрыКлиент - перенесено, чтоб не зависеть от ОМ

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции


&НаКлиенте 
Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

#КонецОбласти 
	
#КонецОбласти 

#Область ОбработчикиПериодаКвартал

///////////////////////////////////////////////////////////////////////////////////////////
//			ОБРАБОТКА ПЕРИОДА КВАРТАЛ

&НаКлиенте 
Процедура ПериодРегистрацииКвПриИзменении(Элемент)
	КварталСтрока = Элементы.КварталСтрока.СписокВыбора.НайтиПоЗначению(Отчет.Период);
	КварталСтрока = ДатаКакКварталПредставление(Отчет.Период);
КонецПроцедуры // ПериодРегистрацииПриИзменении()

&НаКлиенте 
Процедура ПериодРегистрацииКвРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Отчет.Период = НачалоКвартала(ДобавитьМесяц(Отчет.Период, Направление*3));
	КварталСтрока = ДатаКакКварталПредставление(Отчет.Период);
КонецПроцедуры // ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура КварталСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, Отчет.Период, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, Отчет.Период, ЭтаФорма);	
	//ДатаКакКварталАвтоПодборТекста(Текст, ПараметрыПолученияДанных.СтрокаПоиска, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДатаКакКварталОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте 
Процедура ПериодРегистрацииКвОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

#Область ПроцедурДляОбеспеченияВыводаКвартал

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
&НаКлиенте 
Функция ДатаКакКварталПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) Экспорт
	СписокВозврата = Новый СписокЗначений;
	Если ПустаяСтрока(Текст) Тогда
	    Возврат СписокВозврата;
	КонецЕсли;

	ТекущийГод = Год(ДатаСеанса());
	
	Если Найти(Текст, ".") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ".", Истина);
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ",", Истина);
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "-", Истина);
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "/", Истина);
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "\", Истина);
	Иначе
	    Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, " ", Истина);
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
	    // единственное слово - это либо год, либо квартал
	    Если ТолькоЦифрыВСтроке(Текст) Тогда
	        КварталЧислом = Число(Текст);
	        Если КварталЧислом >= 1 и КварталЧислом <=4 Тогда
	            ДатаПоТексту = НачалоКвартала(Дата(ТекущийГод, КварталЧислом*3, 1));
                СписокВозврата.Добавить(ДатаКакКварталПредставление(ДатаПоТексту));
	        Иначе
	            Возврат СписокВозврата;
	        КонецЕсли;                
	    Иначе
	        СписокКварталов = СписокКварталовПоСтроке(Текст);
	        Для Каждого Квартал Из СписокКварталов Цикл
	            ДатаПоТексту = НачалоКвартала(Дата(ТекущийГод, Квартал*3, 1));
	            СписокВозврата.Добавить(ДатаКакКварталПредставление(ДатаПоТексту));
	        КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
	    // два слова - первое считаем месяцем, второе - годом
	    Если ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
	        Если ПустаяСтрока(Подстроки[1]) Тогда
	            ГодЧислом = 0;
	            Подстроки[1] = "0";
	            ТекстВозврата = Текст + "0";
	        Иначе
	            ГодЧислом = Число(Подстроки[1]);
	            ТекстВозврата = "";
	        КонецЕсли;
	        Если ГодЧислом > 3000 Тогда
	            Возврат СписокВозврата;
	        КонецЕсли;
	        Если СтрДлина(Подстроки[1]) <= 1 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
	            СтрокаФорматированияГода = "г";
	        ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
	            СтрокаФорматированияГода = "гг";
	        ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
	            ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
	            СтрокаФорматированияГода = "гггг";
	        КонецЕсли;                    
	    Иначе
	        // второе слово может быть только годом
	        Возврат СписокВозврата;
		КонецЕсли;
		
	    Если ЗначениеЗаполнено(Подстроки[0]) И ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
	        МесяцЧислом = Число(Подстроки[0]);
	        Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
	            // если "правильный" месяц и год
	            ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
	            СписокВозврата.Добавить(ТекстВозврата);
	        Иначе
	            Возврат СписокВозврата;
	        КонецЕсли;                
	    Иначе
	        СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
	        Если СписокМесяцев.Количество() = 1 Тогда
	            ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
	            СписокВозврата.Добавить("");
	        Иначе
	            Для Каждого Месяц Из СписокМесяцев Цикл
	                ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
	                СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
	            КонецЦикла;
	        КонецЕсли;
	    КонецЕсли;
	КонецЕсли; 

	Возврат СписокВозврата;
	
КонецФункции

// подбирает массив номеров кварталов, соответствующих переданной строке
// используется в ПодобратьДатуПоТексту
//
&НаКлиенте 
Функция СписокКварталовПоСтроке(Текст)
	
	СписокКварталов = Новый СписокЗначений;
	Кварталы = Новый Соответствие;
	КварталыВозврата = Новый Массив;
		
	//Для Счетчик = 1 По 4 Цикл
	//	Представление = КварталРимскими(Счетчик) + " квартал " + Формат(, "ДФ='гггг ""г.""'");
	//	СписокКварталов.Добавить(Счетчик, Представление);
	//КонецЦикла;
	//
	//Для Каждого ЭлементСписка Из СписокКварталов Цикл
	//	Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
	//		Кварталы[ЭлементСписка.Значение] = 0;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Элемент Из Кварталы Цикл
	//	КварталыВозврата.Добавить(Элемент.Ключ);
	//КонецЦикла;
	//
	Возврат КварталыВозврата;
	
КонецФункции

&НаКлиенте 
Процедура ДатаКакКварталАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	//Список = ДатаКакКварталПодобратьДатуПоТексту(Текст);
	//Если Список.Количество() = 0 Тогда
	//	Возврат;
	//ИначеЕсли Список.Количество() = 1 Тогда
	//    ТекстАвтоПодбора = Список[0];
	//КонецЕсли;
	//СтандартнаяОбработка = Ложь;			
КонецПроцедуры

&НаКлиенте 
Процедура ДатаКакКварталОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
	//Список = ДатаКакКварталПодобратьДатуПоТексту(Текст);
	//Если Список.Количество() = 1 Тогда
	//    Значение = Текст;
	//Иначе
	//    Значение = Список;
	//КонецЕсли;
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрацииКв(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	Элементы.КварталСтрока.СписокВыбора.Очистить();
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоКварталаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 4 Цикл
		НачалоКварталаЗаполнения = НачалоКвартала(ДобавитьМесяц(НачалоТекущегоГода, а*3-1));
		ДобавленныйЭлемент = Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоКварталаЗаполнения, ДатаКакКварталПредставление(НачалоКварталаЗаполнения));
		Если НачальноеЗначение = НачалоКварталаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	Элементы.КварталСтрока.СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
		
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Отчет.Период = ВыбранноеЗначение;
КонецПроцедуры


&НаКлиенте 
Функция ДатаКакКварталПредставление(ДатаДата) Экспорт
	НомерКвартала = Число(Формат(ДатаДата, "ДФ=к"));
	Возврат КварталРимскими(НомерКвартала) + " квартал " + Формат(ДатаДата, "ДФ='гггг ""г.""'");
КонецФункции

Функция КварталРимскими(НомерКвартала)
    Если НомерКвартала = 1 Тогда
		Возврат "I";
	ИначеЕсли НомерКвартала = 2 Тогда 
		Возврат "II";
	ИначеЕсли НомерКвартала = 3 Тогда 
		Возврат "III";
	ИначеЕсли НомерКвартала = 4 Тогда 
		Возврат "IV";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // КварталРимскими()

#КонецОбласти 
	
#КонецОбласти 

#Область ВспомогательныеДляРасчетовТектовыхПериодов

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
&НаКлиенте 
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				МассивСтрок.Добавить("");
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			МассивСтрок.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		МассивСтрок.Добавить(Строка);
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте 
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции
	
#КонецОбласти

#Область ОбщиеОбработчикиПериода

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	ИзменитьПериод(-1);
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	ИзменитьПериод(1);
	ОтобразитьСостояниеОтчета("Сменился период формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

&НаСервере 
Процедура ИзменитьПериод(ЧислоМесяцев)
	Если Элементы.ПанельИнтервалов.ТекущаяСтраница = Элементы.Квартал Тогда
		Отчет.НачалоПериода = НачалоКвартала(ДобавитьМесяц(Отчет.НачалоПериода,ЧислоМесяцев));
		Отчет.КонецПериода 	= КонецКвартала(ДобавитьМесяц(Отчет.КонецПериода,ЧислоМесяцев));
	Иначе
		Отчет.НачалоПериода = НачалоМесяца(ДобавитьМесяц(Отчет.НачалоПериода,ЧислоМесяцев));
		Отчет.КонецПериода 	= КонецМесяца(ДобавитьМесяц(Отчет.КонецПериода,ЧислоМесяцев));
	КонецЕсли;
	//ПримененияПараметровСКД();	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

&НаКлиенте
Процедура ВидКонтрагентовКРПриИзменении(Элемент)
	Если ВидКонтрагентовКР = 1 Тогда
		ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, "поставщик", "клиент");
	Иначе
		ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, "клиент", "поставщик");
	КонецЕсли;
	ОтобразитьСостояниеОтчета("Сменились данные формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОтобразитьСостояниеОтчета("Сменилась Организация для формирования отчета! Необходимо переформировать отчет.");
КонецПроцедуры

#Область ПоляТаблицыРезультата

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	СуммаЯчеек = ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
КонецПроцедуры

#Область РасшифровкаДанныхОтчета

&НаСервереБезКонтекста  
Функция РасшифроватьУровень(Уровень, СтруктураДанных, РасшифровыватьДоРодителя = Ложь)
	// пробегаем все уровни вверх от корня и получаем данные и записываем в структуру
	МВерхУровень = Уровень.ПолучитьРодителей();
	Для каждого ВУровень Из МВерхУровень Цикл
		Если ТипЗнч(ВУровень) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляУроня = ВУровень.ПолучитьПоля();
			Для каждого ПолеУровня Из ПоляУроня Цикл
				Если Не РасшифровыватьДоРодителя И СтруктураДанных.Свойство(ПолеУровня.Поле) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураДанных.Вставить(ПолеУровня.Поле, ПолеУровня.Значение);
			КонецЦикла; 
		КонецЕсли;
		РасшифроватьУровень(ВУровень, СтруктураДанных);
	КонецЦикла; 
КонецФункции // РасшифроватьУровень
 
&НаСервереБезКонтекста  
Функция ПолучитьДанныеРасшифровки(Расшифровка, АдресРасшифровки, РасшифровыватьДоРодителя = Ложь, ВключатьКорень = Истина)

	фДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	СтруктураДанных = Новый Структура;

	Если фДанныеРасшифровки = Неопределено Тогда
		Возврат СтруктураДанных;
	КонецЕсли;

	Корень = фДанныеРасшифровки.Элементы[Расшифровка];
	Если ВключатьКорень Тогда
		ПоляУроня = Корень.ПолучитьПоля();
		Для каждого ПолеУровня Из ПоляУроня Цикл
			СтруктураДанных.Вставить(ПолеУровня.Поле, ПолеУровня.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	РасшифроватьУровень(Корень, СтруктураДанных, РасшифровыватьДоРодителя);	

	Возврат СтруктураДанных;

КонецФункции // ПолучитьДанныеРасшифровки()


&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Перем ДоступныеДействия;
	
	ДополнительныеПунктыМеню = Новый СписокЗначений;
	ДополнительныеПараметры = Новый Структура;
		
	// описываем нестандартные расшифровки отчета, если надо
	Если НастройкиОтчета.ИмяТекущейСхемыСКД = "НеЗакрытыеПрочиеРасходы" Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПунктыМеню.Добавить("ДополнительнаяРасшифровка", 	"Расшифровать по регистратору");
		ДополнительныеПараметры.Вставить("ИмяМакетаСКД", 				"НеЗакрытыеПрочиеРасходы");
		ДополнительныеПараметры.Вставить("ИндексВариантаРасшифровки",	1);
		ДополнительныеПараметры.Вставить("УровеньГруппировки",			5);
		
		СтруктураРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка, НастройкиОтчета.АдресДанныеРасшифровки, Истина);	
		ДополнительныеПараметры.Вставить("СтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;	
	
	// если получаем расшифровку в виде идентификатора, то придется выёживаться
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СтандартнаяОбработка = Ложь;		
		ИспользоватьОсновДействие = Ложь;
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
       	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);		
	КонецЕсли; 
	
	Если НЕ СтандартнаяОбработка Тогда
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(НастройкиОтчета.АдресДанныеРасшифровки, 
		                       Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
		ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
		ОбработкаРасшифровки.ПоказатьВыборДействия(
							Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиЗавершение", ЭтаФорма, ДополнительныеПараметры), 
							Расшифровка, ДоступныеДействия, ДополнительныеПунктыМеню, ИспользоватьОсновДействие, );		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ВыполненноеДействие,ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
		
	ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда	
		ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(НастройкиОтчета.АдресДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрВыполненногоДействия);
	  
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтандартнаяРасшифровка", 	Истина);		
		ПараметрыФормы.Вставить("Расшифровка", 				ОписаниеОбработкиРасшифровки);
		ПараметрыФормы.Вставить("АдресСхемыСКД", 			НастройкиОтчета.АдресСхемы);
		ПараметрыФормы.Вставить("АдресРасшифровкиСКД",		НастройкиОтчета.АдресДанныеРасшифровки);
		ПараметрыФормы.Вставить("УровеньГруппировки",		0);
	  
		Режим = РежимОткрытияОкнаФормы.Независимый;
		ОповещениеЗакрытияРасшифровки = Новый ОписаниеОповещения("ОбработкаЗакрытияРасшифровкиФормы", ЭтотОбъект);
		ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ФормаРасшифровкиУпр", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор,,,ОповещениеЗакрытияРасшифровки,Режим);
		
	ИначеЕсли ВыполненноеДействие = "ДополнительнаяРасшифровка" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтандартнаяРасшифровка", 	Ложь);
		ПараметрыФормы.Вставить("УровеньГруппировки",		?(ДополнительныеПараметры.Свойство("УровеньГруппировки"), ДополнительныеПараметры.УровеньГруппировки, 3));		
		ПараметрыФормы.Вставить("АдресСхемыСКД", 			ПолучитьАдресДополнительнойСхемы(ДополнительныеПараметры.ИмяМакетаСКД));
		ПараметрыФормы.Вставить("ИндексВариантаРасшифровки",?(ДополнительныеПараметры.Свойство("ИндексВариантаРасшифровки"), ДополнительныеПараметры.ИндексВариантаРасшифровки, 0));
		
		ПараметрыФормы.Вставить("АдресРасшифровкиСКД",		НастройкиОтчета.АдресДанныеРасшифровки);		
		ПараметрыФормы.Вставить("СтруктураРасшифровки", 	ДополнительныеПараметры.СтруктураРасшифровки);
		
		СтруктураПараметров = Новый Структура("НачалоПериода,КонецПериода,Период,Организация");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Отчет);
		ПараметрыФормы.Вставить("СтруктураПараметров",		СтруктураПараметров);
	  
		Режим = РежимОткрытияОкнаФормы.Независимый;
		ОповещениеЗакрытияРасшифровки = Новый ОписаниеОповещения("ОбработкаЗакрытияРасшифровкиФормы", ЭтотОбъект);
		ОткрытьФорму("ВнешнийОтчет." + НастройкиОтчета.ИмяВнешнейОбработки + ".Форма.ФормаРасшифровкиУпр", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор,,,ОповещениеЗакрытияРасшифровки,Режим);
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Функция ПолучитьАдресДополнительнойСхемы(ИмяСхемы)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаСКД = ОтчетОбъект.ПолучитьМакет(ИмяСхемы);
	АдресСхемыСКД = ПоместитьВоВременноеХранилище(СхемаСКД, Новый УникальныйИдентификатор);
	Возврат АдресСхемыСКД;
	
КонецФункции // ПолучитьАдресДополнительнойСхемы

&НаКлиенте
Процедура ОбработкаЗакрытияРасшифровкиФормы(РезультатВыбора, ДопПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры // ОбработкаЗакрытияНастроекФормы()

#КонецОбласти 

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеВидимостиФормы

&НаКлиенте
Процедура ОтобразитьСостояниеОтчета(ТекстСостояния = "")
	
	ПолеТабличногоДокумента = Элементы.Результат;	
	ОтображатьСостояние = Не ПустаяСтрока(ТекстСостояния);
	
	ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	ОтображениеСостояния.Текст = ТекстСостояния;
	ОтображениеСостояния.Видимость = ОтображатьСостояние;
	ОтображениеСостояния.ДополнительныйРежимОтображения = 
		?(ОтображатьСостояние, ДополнительныйРежимОтображения.Неактуальность, ДополнительныйРежимОтображения.НеИспользовать);
		
	ПолеТабличногоДокумента.Доступность = НЕ ОтображатьСостояние;
	Элементы.ОтображатьЗаголовки.Доступность = НЕ ОтображатьСостояние;
	Элементы.СохранитьКак.Доступность = НЕ ОтображатьСостояние;

			//ОтображениеСостояния.Видимость                      = Истина;
			//ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			//ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			//ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
	
КонецПроцедуры

&НаКлиенте 
// Управление видимостью элементов формы в зависимости от условий
Процедура УправлениеВидимостью()
	
	ЭтаФорма.Заголовок = НастройкиОтчета.ПредставлениеВарианта 
		+ ?(ЗначениеЗаполнено(НастройкиОтчета.СохраненныйВариант), " (" + СокрЛП(НастройкиОтчета.СохраненныйВариант) + ")", "")
		+ ?(Версия = "", "", " ~ ver." + СокрЛП(Версия) + "");
	
	// устанавливаем нужную панель для отчета
	Страница = Отчет.ВариантыОтчетов[НастройкиОтчета.ИндексВариантаОтчета].Слой;
	Элементы.ПанельИнтервалов.Видимость = Страница <> "БезВыбора";
	Если Страница <> "БезВыбора" Тогда
		Элементы.ПанельИнтервалов.ТекущаяСтраница = ?(ЗначениеЗаполнено(Страница),Элементы[Страница],Элементы.Оборот);
	КонецЕсли;
	
	Если Страница = "Месяц" Тогда
		Отчет.Период = НачалоМесяца(Отчет.Период);
		Если ИспользоватьПериодСНачалаГода Тогда
			Элементы.НадписьМесяц.Заголовок = "За период с начала года по:";
		КонецЕсли;
	ИначеЕсли Страница = "Квартал" Тогда
		Отчет.Период = НачалоКвартала(Отчет.Период);
		Если ИспользоватьПериодСНачалаГода Тогда
			Элементы.НадписьКвартал.Заголовок = "За период с начала года по:";
		КонецЕсли;
	Иначе
		Отчет.Период = ДатаСеанса();
	КонецЕсли; 
	
	// для периода месяц
	МесяцСтрока = ДатаКакМесяцПредставление(Отчет.Период);
	// для периода квартал
	КварталСтрока = ДатаКакКварталПредставление(Отчет.Период);
	
	// нестандарт
	Элементы.НастройкиСКД.Видимость = НЕ (НастройкиОтчета.ИмяТекущейСхемыСКД = "ПроверкаКорректностиВзаиморасчетов"
		ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОбъектовРасчетаВзаиморасчетов");
	Элементы.ГруппаНастроекПользователя.Видимость = Элементы.НастройкиСКД.Видимость;
	
	ПоРегистрам = НастройкиОтчета.ИмяВариантаОтчета = "РазвернутыеРегистрыВзаиморасчетовПоОрганизации" 
		ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОтсутствияДвиженийРегистровВзаимДокументов"
		ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОбъектовРасчетаВзаиморасчетов"
		ИЛИ НастройкиОтчета.ИмяТекущейСхемыСКД = "КонтрольОтрицательныхОстатковПоСрокам";
	
	Элементы.ВидКонтрагентовКР.Видимость = ПоРегистрам;
	Элементы.ВидКонтрагентовКР1.Видимость = ПоРегистрам;
	Элементы.ВидКонтрагентовКР2.Видимость = ПоРегистрам;
	
	Если ПоРегистрам Тогда
		ЭтаФорма.Заголовок = ?(ВидКонтрагентовКР = 0, СтрЗаменить(ЭтаФорма.Заголовок, "клиент", "поставщик"), СтрЗаменить(ЭтаФорма.Заголовок, "поставщик", "клиент"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// программно формируем меню из вариантов СКД
Процедура СформироватьПодменюВариантовОтчета()
	
	// находим подменю вариантов отчета
	КоманднаяПанельДействий = Элементы.Найти("ВариантыОтчета");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если всего один вариант отчета, то смысла создавать меню нет
	Если Отчет.ВариантыОтчетов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСхема = "";
	Для каждого СтрВарианта Из Отчет.ВариантыОтчетов Цикл
		Если ТекущаяСхема <> СтрВарианта.ИмяСхемы Тогда
			ГруппаВарианта = Элементы.Добавить("ГруппаВарианта" + Формат(СтрВарианта.НомерСтроки, "ЧДЦ=; ЧГ=0"), Тип("ГруппаФормы"), Элементы.ВариантыОтчета);
			ГруппаВарианта.Вид = ВидГруппыФормы.ГруппаКнопок;
		КонецЕсли; 
		
		Попытка
			КомандаВарианта = Команды.Добавить(СтрВарианта.ИмяВарианта);
			КомандаВарианта.Действие = "УстановитьВариантСхемы";
			
			КнопкаВариантаФормы = Элементы.Добавить(СтрВарианта.ИмяВарианта, Тип("КнопкаФормы"), ГруппаВарианта);
		    КнопкаВариантаФормы.Вид 		= ВидКнопкиФормы.КнопкаКоманднойПанели;
		    КнопкаВариантаФормы.Заголовок 	= СтрВарианта.Представление;
		    КнопкаВариантаФормы.ИмяКоманды 	= СтрВарианта.ИмяВарианта;    			
		Исключение
		    Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Будут показаны не все варианты отчета: невозможно создать " + СтрВарианта.ИмяСхемы + " вариант " + СтрВарианта.ИмяВарианта;
			Сообщение.Сообщить(); 
		КонецПопытки;
		
		Если ТекущаяСхема = "" Тогда
			КнопкаВариантаФормы.Пометка = Истина;
		КонецЕсли; 
		
		ТекущаяСхема = СтрВарианта.ИмяСхемы; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
// Генерирует кнопки управления группировкой
Процедура СгенерироватьКнопкиУправленияГруппировкой()
	
	// находим подменю вариантов отчета
	КоманднаяПанельДействий = Элементы.Найти("ГруппаКнопокУровней");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ПрефиксИмениКн = "КнГр_";
	
	Инд = 1;
	Пока Истина Цикл
		КнопкаУровня = Элементы.Найти(ПрефиксИмениКн + Инд);
		Если КнопкаУровня = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Элементы.Удалить(КнопкаУровня);
		Команды.Удалить(Команды.Найти(ПрефиксИмениКн + Инд));
		Инд = Инд + 1;
	КонецЦикла; 
	
    // Добавить новые кнопки по количеству группировок
    КоличествоГруппировок = Результат.КоличествоУровнейГруппировокСтрок();
	Для Сч = 1 По КоличествоГруппировок Цикл
		НоваяКоманда = Команды.Добавить(ПрефиксИмениКн + Сч);
		НоваяКоманда.Действие = "СвернутьДоУровня";
		
		НоваяКнопка = Элементы.Добавить(ПрефиксИмениКн + Сч, Тип("КнопкаФормы"), Элементы.ГруппаКнопокУровней);
    	НоваяКнопка.Шрифт     = Новый Шрифт("Шрифт диалогов и меню",,7,,Истина);
    	НоваяКнопка.Заголовок = "<Уровень-" + Сч + ">";
		НоваяКнопка.ИмяКоманды = ПрефиксИмениКн + Сч;
    КонецЦикла;
	
КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

&НаСервере
// формирует быстрый доступ к указанным настройкам пользователя
Процедура СформироватьБыстрыйДоступКНастройкамПользователя()
	
	// находим подменю быстрого доступа
	КоманднаяПанельДействий = Элементы.Найти("ГруппаЧастоИспользуемыеНастройки");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыеОтборы = Отчет.СохраненныеНастройкиПользователей.НайтиСтроки(Новый Структура("БыстрыйВыбор", Истина));
	// если нет настроек быстрого доступа, то смысла идти дальше нет
	Если БыстрыеОтборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
    ПрефиксИмениКн = "НастрUser_";
	
	// убирем предыдущие команды
	Инд = 1;
	Пока Истина Цикл
		КнопкаВариантаФормы = Элементы.Найти(ПрефиксИмениКн + Инд);
		Если КнопкаВариантаФормы = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Элементы.Удалить(КнопкаВариантаФормы);
		Команды.Удалить(Команды.Найти(ПрефиксИмениКн + Инд));
		Инд = Инд + 1;
	КонецЦикла; 
	
	// количество команд ограничим 7, мне нравится это число
	ЧислоКоманд = 7;	
	
	ТекущаяСхема = ""; НомерКоманды = 1;
	Для каждого СтрНастройки Из БыстрыеОтборы Цикл		
		Попытка
			ИмяКоманды = ПрефиксИмениКн + НомерКоманды; 
			КомандаНастройки = Команды.Добавить(ИмяКоманды);
			КомандаНастройки.Действие = "УстановитьНастройкуПользователя";
			
			КнопкаВариантаФормы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КоманднаяПанельДействий);
		    КнопкаВариантаФормы.Вид 		= ВидКнопкиФормы.КнопкаКоманднойПанели;
		    КнопкаВариантаФормы.Заголовок 	= СтрНастройки.Наименование;
		    КнопкаВариантаФормы.ИмяКоманды 	= ИмяКоманды; 
			
			СтрНастройки.ИмяКоманды = ИмяКоманды;	// для дальнейшего поиска
			НомерКоманды = НомерКоманды + 1;
		Исключение КонецПопытки;
		
		Если НомерКоманды > ЧислоКоманд Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // СформироватьБыстрыйДоступКНастройкамПользователя()

&НаСервере
Процедура УстановитьПометкуИспользованияНастройки(ВыбраннаяНастройка)
	КоманднаяПанельДействий = Элементы.Найти("ГруппаЧастоИспользуемыеНастройки");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Найден = Отчет.СохраненныеНастройкиПользователей.НайтиСтроки(Новый Структура("Настройка", ВыбраннаяНастройка));
	Если Найден.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды = Найден[0].ИмяКоманды;
	Для каждого КнопкаГруппы Из КоманднаяПанельДействий.ПодчиненныеЭлементы Цикл
		КнопкаГруппы.Пометка = (КнопкаГруппы.ИмяКоманды = ИмяКоманды);
	КонецЦикла; 

КонецПроцедуры // УстановитьПометкуИспользованияНастройки()
 
#КонецОбласти 

#Область ДополнительныеПроцедуры

&НаСервере
Функция СоздатьНастройкиОтчета()
	НастройкиОтчета = Новый Структура;
	
	НастройкиОтчета.Вставить("АдресСхемы",          		"");
	НастройкиОтчета.Вставить("АдресНастроекКомпановщика", 	"");
	НастройкиОтчета.Вставить("АдресДанныеРасшифровки",		"");
	НастройкиОтчета.Вставить("СхемаМодифицирована", 		Истина);
	НастройкиОтчета.Вставить("КлючСхемы",           		"");
	
	НастройкиОтчета.Вставить("ИндексВариантаОтчета",	0);
	НастройкиОтчета.Вставить("ИмяВариантаОтчета", 		"");
	НастройкиОтчета.Вставить("ИмяТекущейСхемыСКД",  	"");
	НастройкиОтчета.Вставить("ИмяВнешнейОбработки",		"");
	НастройкиОтчета.Вставить("ПредставлениеВарианта", 	"");
	НастройкиОтчета.Вставить("НастройкиОтбора",			Новый Структура);	
	
	НастройкиОтчета.Вставить("РасширеннаяНастройка",	Ложь);
	
	НастройкиОтчета.Вставить("СохраненныйВариант",		ПредопределенноеЗначение("Справочник.ВариантыОтчетов.ПустаяСсылка"));
	НастройкиОтчета.Вставить("ГлУзелВариантовОтчета", 	ПредопределенноеЗначение("Справочник.ВариантыОтчетов.ПустаяСсылка"));
	
	Возврат НастройкиОтчета;
	
КонецФункции // СоздатьНастройкиФормы

&НаСервере
Функция ПолучитьСтруктуруДанныхОтчета()
	ОтчетСтруктура = Новый Структура(Отчет.СохраняемыеДанные);	
	Для каждого Элем Из ОтчетСтруктура Цикл
		ОтчетСтруктура[Элем.Ключ] = Отчет[Элем.Ключ];
	КонецЦикла;
	
	ОтчетСтруктура.Вставить("НачалоПериода", 	Отчет.НачалоПериода);
	ОтчетСтруктура.Вставить("КонецПериода", 	Отчет.КонецПериода);
	ОтчетСтруктура.Вставить("Период", 			Отчет.Период);
		
	ОтчетСтруктура.Вставить("СохраняемыеДанные", 				Отчет.СохраняемыеДанные);
	ОтчетСтруктура.Вставить("ИдентификаторСохраненияНастроек", 	Отчет.ИдентификаторСохраненияНастроек);
	
	Возврат ОтчетСтруктура;
	
КонецФункции // ПолучитьСтруктуруДанныхОтчета

&НаСервере 
Процедура ПроверкаЗаполненияПередВыполнением()
	
	//// прописываем чтоб были условия для отчета по инициаторам
	//Если Найти(КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title").Значение, "инициатором") > 0 Тогда
	//	Для каждого СтрОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
	//		Если СтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладКомпании") Тогда
	//			Если НЕ(ЗначениеЗаполнено(СтрОтбора.ПравоеЗначение) ИЛИ СтрОтбора.Использование) Тогда
	//				Сообщить("Заполните склад, по которому будет осуществляться отчет!");
	//				Возврат;
	//			КонецЕсли; 
	//		ИначеЕсли СтрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура") Тогда
	//			Если НЕ(ЗначениеЗаполнено(СтрОтбора.ПравоеЗначение) ИЛИ СтрОтбора.Использование) Тогда
	//				Сообщить("Заполните номенклатуру, по которой будет осуществляться отчет!");
	//				Возврат;
	//			КонецЕсли; 
	//		КонецЕсли; 
	//	КонецЦикла;	
	//КонецЕсли; 
	
КонецПроцедуры	// ПроверкаЗаполненияПередВыполнением

// -----------------------------------------------------------

&НаКлиентеНаСервереБезКонтекста
// Получение представления времени формирования отчета
Функция ПолучитьПредставлениеВремени(Миллисекунды) Экспорт
	
	КолВоЧасов=Цел(Миллисекунды/(60*60*1000));
	Остаток=Миллисекунды-КолВоЧасов*60*60*1000;
	КолВоМинут=Цел(Остаток/(60*1000));
	Остаток=Остаток-КолВоМинут*60*1000;
	КолВоСекунд=Цел(Остаток/1000);
	КолВоМиллисекунд=Остаток-КолВоСекунд*1000;
	
	Возврат Формат(КолВоЧасов,"ЧЦ=2;ЧН=;ЧВН=")+":"+Формат(КолВоМинут,"ЧЦ=2;ЧН=;ЧВН=")+":"+Формат(КолВоСекунд,"ЧЦ=2;ЧН=;ЧВН=")+":"+Формат(КолВоМиллисекунд,"ЧЦ=3;ЧН=;ЧВН=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// Дополняет структуру значениями из другой структуры.
//
// Параметры:
//   Приемник - Структура - коллекция, в которую будут добавляться новые значения.
//   Источник - Структура - коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   Заменять - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника:
//                                       Истина - Заменять значения приемника (самый быстрый способ),
//                                       Ложь   - Не заменять значения приемника (пропускать),
//                                       Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пересечение ключей источника и приемника: ""%1"".'"), Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	ВычисляемаяСумма = 0; КоличествоЯчеек = 0;
	ТекущийТабличныйДокумент = ЭтотОбъект[ПолеТабличногоДокумента.Имя];
	
	Для Каждого Область Из ТекущийТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Значение = ТекущийТабличныйДокумент.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")).Текст;
						Значение = ?(СтрНайти(Значение, "(")=0, Значение, "-" + Значение);
						Значение = СтрЗаменить(Значение, "(", "");  Значение = СтрЗаменить(Значение, ")", "");  Значение = СтрЗаменить(Значение, " ", "");
						ВычисляемаяСумма = ВычисляемаяСумма + Число(Значение);
						КоличествоЯчеек = КоличествоЯчеек + 1;
						Если КоличествоЯчеек > 1000 Тогда
							Прервать;
						КонецЕсли; 
					Исключение
					КонецПопытки;
				КонецЦикла;
				Если КоличествоЯчеек > 1000 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если КоличествоЯчеек > 1000 Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	КолЯчеек = "";
	Если КоличествоЯчеек > 1000 Тогда
		КолЯчеек = "(ячеек > 1000)";
	Иначе 
		КолЯчеек = ?(КоличествоЯчеек > 0, "  (в " + Формат(КоличествоЯчеек, "ЧЦ=3; ЧДЦ=0; ЧГ=0") + ?(КоличествоЯчеек = 1, " поле)"," полях)"), "");
	КонецЕсли;		
	
	СуммаЯчеекКомментарий = КолЯчеек;
	
	Возврат ?(КоличествоЯчеек > 1000, "__.__", Формат(ВычисляемаяСумма, "ЧГ=3,0; ЧН=0.00"));

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыЗначенияДляОткрытия(Значение)
	МетаЗначение = Значение.Метаданные();
	СтруктураОбъектов = Новый Структура("Справочники,Документы,Задачи,ПланыСчетов,БизнесПроцессы",
										"Справочник", "Документ", "Задача", "ПланСчетов", "БизнесПроцесс");
	ИмяВидаЗначения = "";
	Для каждого Элем Из СтруктураОбъектов Цикл
		Если Метаданные[Элем.Ключ].Содержит(МетаЗначение) Тогда
			ИмяВидаЗначения = Элем.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИмяВидаЗначения = "" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ИмяВидаЗначения + "." + МетаЗначение.Имя + ".ФормаОбъекта";
	
КонецФункции // ПолучитьИмяФормыЗначенияДляОткрытия

&НаКлиентеНаСервереБезКонтекста 
// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	СписокСимволов.Добавить(".");
	
	Возврат СписокСимволов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда 		
		Возврат ИтоговоеИмяФайла;         		
	КонецЕсли;                 	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл  		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");		
	КонецЦикла;
	
	Возврат СокрЛП(ИтоговоеИмяФайла);

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

&НаКлиентеНаСервереБезКонтекста 
Функция ТипФайлаПоРасширению(Знач ИмяФайла) Экспорт
	Расширение = СокрЛП(ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, "."));
	Попытка
		ТипФайла = ТипФайлаТабличногоДокумента[Расширение];
	Исключение
		ТипФайла = ТипФайлаТабличногоДокумента.XLS;
	КонецПопытки; 
	Возврат ТипФайла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
		КонецЕсли;
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции // ДатаСеанса

#КонецОбласти 

#КонецОбласти
